
Manual-feedback-geneva tune and rack auto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  00001d48  00001ddc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010e  0080020c  0080020c  00001de8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001de8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00001e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004652  00000000  00000000  00002148  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001aaf  00000000  00000000  0000679a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b78  00000000  00000000  00008249  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000890  00000000  00000000  00009dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001455  00000000  00000000  0000a654  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000183f  00000000  00000000  0000baa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  0000d2e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	73 c0       	rjmp	.+230    	; 0xe8 <__ctors_end>
       2:	00 00       	nop
       4:	12 c2       	rjmp	.+1060   	; 0x42a <__vector_1>
       6:	00 00       	nop
       8:	47 c2       	rjmp	.+1166   	; 0x498 <__vector_2>
       a:	00 00       	nop
       c:	7c c2       	rjmp	.+1272   	; 0x506 <__vector_3>
       e:	00 00       	nop
      10:	b1 c2       	rjmp	.+1378   	; 0x574 <__vector_4>
      12:	00 00       	nop
      14:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__vector_5>
      18:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <__vector_6>
      1c:	95 c0       	rjmp	.+298    	; 0x148 <__bad_interrupt>
      1e:	00 00       	nop
      20:	93 c0       	rjmp	.+294    	; 0x148 <__bad_interrupt>
      22:	00 00       	nop
      24:	91 c0       	rjmp	.+290    	; 0x148 <__bad_interrupt>
      26:	00 00       	nop
      28:	8f c0       	rjmp	.+286    	; 0x148 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8d c0       	rjmp	.+282    	; 0x148 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8b c0       	rjmp	.+278    	; 0x148 <__bad_interrupt>
      32:	00 00       	nop
      34:	89 c0       	rjmp	.+274    	; 0x148 <__bad_interrupt>
      36:	00 00       	nop
      38:	87 c0       	rjmp	.+270    	; 0x148 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c 94 15 0a 	jmp	0x142a	; 0x142a <__vector_15>
      40:	83 c0       	rjmp	.+262    	; 0x148 <__bad_interrupt>
      42:	00 00       	nop
      44:	81 c0       	rjmp	.+258    	; 0x148 <__bad_interrupt>
      46:	00 00       	nop
      48:	7f c0       	rjmp	.+254    	; 0x148 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7d c0       	rjmp	.+250    	; 0x148 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7b c0       	rjmp	.+246    	; 0x148 <__bad_interrupt>
      52:	00 00       	nop
      54:	cb c1       	rjmp	.+918    	; 0x3ec <__vector_21>
      56:	00 00       	nop
      58:	77 c0       	rjmp	.+238    	; 0x148 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	75 c0       	rjmp	.+234    	; 0x148 <__bad_interrupt>
      5e:	00 00       	nop
      60:	73 c0       	rjmp	.+230    	; 0x148 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 1f 0c 	jmp	0x183e	; 0x183e <__vector_25>
      68:	6f c0       	rjmp	.+222    	; 0x148 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6d c0       	rjmp	.+218    	; 0x148 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6b c0       	rjmp	.+214    	; 0x148 <__bad_interrupt>
      72:	00 00       	nop
      74:	69 c0       	rjmp	.+210    	; 0x148 <__bad_interrupt>
      76:	00 00       	nop
      78:	67 c0       	rjmp	.+206    	; 0x148 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	65 c0       	rjmp	.+202    	; 0x148 <__bad_interrupt>
      7e:	00 00       	nop
      80:	63 c0       	rjmp	.+198    	; 0x148 <__bad_interrupt>
      82:	00 00       	nop
      84:	61 c0       	rjmp	.+194    	; 0x148 <__bad_interrupt>
      86:	00 00       	nop
      88:	5f c0       	rjmp	.+190    	; 0x148 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5d c0       	rjmp	.+186    	; 0x148 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 2f 0c 	jmp	0x185e	; 0x185e <__vector_36>
      94:	59 c0       	rjmp	.+178    	; 0x148 <__bad_interrupt>
      96:	00 00       	nop
      98:	57 c0       	rjmp	.+174    	; 0x148 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	55 c0       	rjmp	.+170    	; 0x148 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	53 c0       	rjmp	.+166    	; 0x148 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	51 c0       	rjmp	.+162    	; 0x148 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	16 c6       	rjmp	.+3116   	; 0xcd6 <__vector_42>
      aa:	00 00       	nop
      ac:	4d c0       	rjmp	.+154    	; 0x148 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4b c0       	rjmp	.+150    	; 0x148 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	49 c0       	rjmp	.+146    	; 0x148 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	47 c0       	rjmp	.+142    	; 0x148 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	45 c0       	rjmp	.+138    	; 0x148 <__bad_interrupt>
      be:	00 00       	nop
      c0:	43 c0       	rjmp	.+134    	; 0x148 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	41 c0       	rjmp	.+130    	; 0x148 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3f c0       	rjmp	.+126    	; 0x148 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 3f 0c 	jmp	0x187e	; 0x187e <__vector_51>
      d0:	3b c0       	rjmp	.+118    	; 0x148 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	39 c0       	rjmp	.+114    	; 0x148 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 73 0c 	jmp	0x18e6	; 0x18e6 <__vector_54>
      dc:	35 c0       	rjmp	.+106    	; 0x148 <__bad_interrupt>
      de:	00 00       	nop
      e0:	33 c0       	rjmp	.+102    	; 0x148 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
      e4:	f1 02       	muls	r31, r17
      e6:	ef 0a       	sbc	r14, r31

000000e8 <__ctors_end>:
      e8:	11 24       	eor	r1, r1
      ea:	1f be       	out	0x3f, r1	; 63
      ec:	cf ef       	ldi	r28, 0xFF	; 255
      ee:	d1 e2       	ldi	r29, 0x21	; 33
      f0:	de bf       	out	0x3e, r29	; 62
      f2:	cd bf       	out	0x3d, r28	; 61
      f4:	00 e0       	ldi	r16, 0x00	; 0
      f6:	0c bf       	out	0x3c, r16	; 60

000000f8 <__do_copy_data>:
      f8:	12 e0       	ldi	r17, 0x02	; 2
      fa:	a0 e0       	ldi	r26, 0x00	; 0
      fc:	b2 e0       	ldi	r27, 0x02	; 2
      fe:	e8 e4       	ldi	r30, 0x48	; 72
     100:	fd e1       	ldi	r31, 0x1D	; 29
     102:	00 e0       	ldi	r16, 0x00	; 0
     104:	0b bf       	out	0x3b, r16	; 59
     106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x14>
     108:	07 90       	elpm	r0, Z+
     10a:	0d 92       	st	X+, r0
     10c:	ac 30       	cpi	r26, 0x0C	; 12
     10e:	b1 07       	cpc	r27, r17
     110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0x10>

00000112 <__do_clear_bss>:
     112:	23 e0       	ldi	r18, 0x03	; 3
     114:	ac e0       	ldi	r26, 0x0C	; 12
     116:	b2 e0       	ldi	r27, 0x02	; 2
     118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
     11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
     11c:	aa 31       	cpi	r26, 0x1A	; 26
     11e:	b2 07       	cpc	r27, r18
     120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>

00000122 <__do_global_ctors>:
     122:	10 e0       	ldi	r17, 0x00	; 0
     124:	c4 e7       	ldi	r28, 0x74	; 116
     126:	d0 e0       	ldi	r29, 0x00	; 0
     128:	00 e0       	ldi	r16, 0x00	; 0
     12a:	06 c0       	rjmp	.+12     	; 0x138 <__do_global_ctors+0x16>
     12c:	21 97       	sbiw	r28, 0x01	; 1
     12e:	01 09       	sbc	r16, r1
     130:	80 2f       	mov	r24, r16
     132:	fe 01       	movw	r30, r28
     134:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__tablejump2__>
     138:	c2 37       	cpi	r28, 0x72	; 114
     13a:	d1 07       	cpc	r29, r17
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	08 07       	cpc	r16, r24
     140:	a9 f7       	brne	.-22     	; 0x12c <__do_global_ctors+0xa>
     142:	be d5       	rcall	.+2940   	; 0xcc0 <main>
     144:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <_exit>

00000148 <__bad_interrupt>:
     148:	5b cf       	rjmp	.-330    	; 0x0 <__vectors>

0000014a <_Z18init_timer_rampingv>:
 //Timer for ramping interrupt in 10ms
 //Global timer
 void init_timer_ramping()
 {
	 
	TCCR0A |= (1<<WGM01);
     14a:	84 b5       	in	r24, 0x24	; 36
     14c:	82 60       	ori	r24, 0x02	; 2
     14e:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00)|(1<<CS02);	//1024 prescaler CTC mode
     150:	85 b5       	in	r24, 0x25	; 37
     152:	85 60       	ori	r24, 0x05	; 5
     154:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<OCIE0A);
     156:	ee e6       	ldi	r30, 0x6E	; 110
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	80 81       	ld	r24, Z
     15c:	82 60       	ori	r24, 0x02	; 2
     15e:	80 83       	st	Z, r24
	TCNT0 = 0; 
     160:	16 bc       	out	0x26, r1	; 38
	OCR0A = 155;
     162:	8b e9       	ldi	r24, 0x9B	; 155
     164:	87 bd       	out	0x27, r24	; 39
     166:	08 95       	ret

00000168 <_Z10drive_initv>:
 
 
 /**************************Initialise the drive components************************/
 
 void drive_init()
 {
     168:	cf 92       	push	r12
     16a:	df 92       	push	r13
     16c:	ef 92       	push	r14
     16e:	ff 92       	push	r15
     170:	0f 93       	push	r16
     172:	1f 93       	push	r17
	 pidflag = false;
     174:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <pidflag>
	 rampupflag_start = false;
     178:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <rampupflag_start>
	 
	 //back_drive = false;
	 //front_drive = false;
	 
	 timer_count = 12;
     17c:	8c e0       	ldi	r24, 0x0C	; 12
     17e:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <timer_count>
	 robot_rpm = 80;
     182:	80 e5       	ldi	r24, 0x50	; 80
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <robot_rpm+0x1>
     18a:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <robot_rpm>
	 for(id=0;id<4;id++)
     18e:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <id+0x1>
     192:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <id>
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	90 e0       	ldi	r25, 0x00	; 0
	 {
		 velocity_motor[id] = 0;
     19a:	9c 01       	movw	r18, r24
     19c:	22 0f       	add	r18, r18
     19e:	33 1f       	adc	r19, r19
     1a0:	f9 01       	movw	r30, r18
     1a2:	ec 55       	subi	r30, 0x5C	; 92
     1a4:	fd 4f       	sbci	r31, 0xFD	; 253
     1a6:	11 82       	std	Z+1, r1	; 0x01
     1a8:	10 82       	st	Z, r1
		 velocity_robot[id] = 0;
     1aa:	f9 01       	movw	r30, r18
     1ac:	e4 56       	subi	r30, 0x64	; 100
     1ae:	fd 4f       	sbci	r31, 0xFD	; 253
     1b0:	11 82       	std	Z+1, r1	; 0x01
     1b2:	10 82       	st	Z, r1
		 m[id].Initialise(id+1);
     1b4:	61 e0       	ldi	r22, 0x01	; 1
     1b6:	68 0f       	add	r22, r24
     1b8:	80 57       	subi	r24, 0x70	; 112
     1ba:	9d 4f       	sbci	r25, 0xFD	; 253
     1bc:	39 d7       	rcall	.+3698   	; 0x1030 <_ZN5Motor10InitialiseEh>
		 e[id].Initialise(id+1);
     1be:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <id>
     1c2:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <id+0x1>
     1c6:	61 e0       	ldi	r22, 0x01	; 1
     1c8:	68 0f       	add	r22, r24
     1ca:	9c 01       	movw	r18, r24
     1cc:	22 0f       	add	r18, r18
     1ce:	33 1f       	adc	r19, r19
     1d0:	22 0f       	add	r18, r18
     1d2:	33 1f       	adc	r19, r19
     1d4:	22 0f       	add	r18, r18
     1d6:	33 1f       	adc	r19, r19
     1d8:	82 0f       	add	r24, r18
     1da:	93 1f       	adc	r25, r19
     1dc:	84 59       	subi	r24, 0x94	; 148
     1de:	9d 4f       	sbci	r25, 0xFD	; 253
     1e0:	78 d2       	rcall	.+1264   	; 0x6d2 <_ZN7Encoder10InitialiseEh>
		 p[id].Set_Pid(2.415,0,0.82);	//2.415 , 0 , 0.82
     1e2:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <id>
     1e6:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <id+0x1>
     1ea:	9c 01       	movw	r18, r24
     1ec:	22 0f       	add	r18, r18
     1ee:	33 1f       	adc	r19, r19
     1f0:	82 0f       	add	r24, r18
     1f2:	93 1f       	adc	r25, r19
     1f4:	88 0f       	add	r24, r24
     1f6:	99 1f       	adc	r25, r25
     1f8:	88 0f       	add	r24, r24
     1fa:	99 1f       	adc	r25, r25
     1fc:	88 0f       	add	r24, r24
     1fe:	99 1f       	adc	r25, r25
     200:	0f 2e       	mov	r0, r31
     202:	f5 e8       	ldi	r31, 0x85	; 133
     204:	cf 2e       	mov	r12, r31
     206:	fb ee       	ldi	r31, 0xEB	; 235
     208:	df 2e       	mov	r13, r31
     20a:	f1 e5       	ldi	r31, 0x51	; 81
     20c:	ef 2e       	mov	r14, r31
     20e:	ff e3       	ldi	r31, 0x3F	; 63
     210:	ff 2e       	mov	r15, r31
     212:	f0 2d       	mov	r31, r0
     214:	00 e0       	ldi	r16, 0x00	; 0
     216:	10 e0       	ldi	r17, 0x00	; 0
     218:	98 01       	movw	r18, r16
     21a:	4c e5       	ldi	r20, 0x5C	; 92
     21c:	5f e8       	ldi	r21, 0x8F	; 143
     21e:	6a e1       	ldi	r22, 0x1A	; 26
     220:	70 e4       	ldi	r23, 0x40	; 64
     222:	84 5f       	subi	r24, 0xF4	; 244
     224:	9d 4f       	sbci	r25, 0xFD	; 253
     226:	12 d7       	rcall	.+3620   	; 0x104c <_ZN3PID7Set_PidEfff>
	 //back_drive = false;
	 //front_drive = false;
	 
	 timer_count = 12;
	 robot_rpm = 80;
	 for(id=0;id<4;id++)
     228:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <id>
     22c:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <id+0x1>
     230:	01 96       	adiw	r24, 0x01	; 1
     232:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <id+0x1>
     236:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <id>
     23a:	84 30       	cpi	r24, 0x04	; 4
     23c:	91 05       	cpc	r25, r1
     23e:	0c f4       	brge	.+2      	; 0x242 <_Z10drive_initv+0xda>
		 velocity_robot[id] = 0;
		 m[id].Initialise(id+1);
		 e[id].Initialise(id+1);
		 p[id].Set_Pid(2.415,0,0.82);	//2.415 , 0 , 0.82
	 }
	 init_timer_ramping();
     240:	ac cf       	rjmp	.-168    	; 0x19a <_Z10drive_initv+0x32>
     242:	83 df       	rcall	.-250    	; 0x14a <_Z18init_timer_rampingv>
 }
     244:	1f 91       	pop	r17
     246:	0f 91       	pop	r16
     248:	ff 90       	pop	r15
     24a:	ef 90       	pop	r14
     24c:	df 90       	pop	r13
     24e:	cf 90       	pop	r12
     250:	08 95       	ret

00000252 <_Z24calculate_wheel_velocityv>:

 
 /***********************Calculation of inverse kinematics****************************************/

  void calculate_wheel_velocity()
  {
     252:	6f 92       	push	r6
     254:	7f 92       	push	r7
     256:	8f 92       	push	r8
     258:	9f 92       	push	r9
     25a:	af 92       	push	r10
     25c:	bf 92       	push	r11
     25e:	cf 92       	push	r12
     260:	df 92       	push	r13
     262:	ef 92       	push	r14
     264:	ff 92       	push	r15
     266:	1f 93       	push	r17
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	c4 ea       	ldi	r28, 0xA4	; 164
     26e:	d2 e0       	ldi	r29, 0x02	; 2
     270:	0f 2e       	mov	r0, r31
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	cf 2e       	mov	r12, r31
     276:	f2 e0       	ldi	r31, 0x02	; 2
     278:	df 2e       	mov	r13, r31
     27a:	f0 2d       	mov	r31, r0
     27c:	0f 2e       	mov	r0, r31
     27e:	fc ea       	ldi	r31, 0xAC	; 172
     280:	af 2e       	mov	r10, r31
     282:	f2 e0       	ldi	r31, 0x02	; 2
     284:	bf 2e       	mov	r11, r31
     286:	f0 2d       	mov	r31, r0
	  for(id=0;id<4;id++)
     288:	7e 01       	movw	r14, r28
     28a:	62 ea       	ldi	r22, 0xA2	; 162
     28c:	72 e0       	ldi	r23, 0x02	; 2
     28e:	47 01       	movw	r8, r14
     290:	0f 2e       	mov	r0, r31
     292:	fc e9       	ldi	r31, 0x9C	; 156
     294:	6f 2e       	mov	r6, r31
     296:	f2 e0       	ldi	r31, 0x02	; 2
     298:	7f 2e       	mov	r7, r31
     29a:	f0 2d       	mov	r31, r0
     29c:	d6 01       	movw	r26, r12
     29e:	f3 01       	movw	r30, r6
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	90 e0       	ldi	r25, 0x00	; 0
	  {
		  velocity_motor[id] = 0;
		  for(jd=0;jd<3;jd++)
		  {
			  velocity_motor[id] += velocity_robot[jd] * coupling_matrix[id][jd];
     2a4:	41 91       	ld	r20, Z+
     2a6:	51 91       	ld	r21, Z+
     2a8:	1d 91       	ld	r17, X+
     2aa:	14 03       	mulsu	r17, r20
     2ac:	90 01       	movw	r18, r0
     2ae:	15 9f       	mul	r17, r21
     2b0:	30 0d       	add	r19, r0
     2b2:	11 24       	eor	r1, r1
     2b4:	82 0f       	add	r24, r18
     2b6:	93 1f       	adc	r25, r19
  void calculate_wheel_velocity()
  {
	  for(id=0;id<4;id++)
	  {
		  velocity_motor[id] = 0;
		  for(jd=0;jd<3;jd++)
     2b8:	e6 17       	cp	r30, r22
     2ba:	f7 07       	cpc	r31, r23
     2bc:	99 f7       	brne	.-26     	; 0x2a4 <_Z24calculate_wheel_velocityv+0x52>
     2be:	f4 01       	movw	r30, r8
     2c0:	91 83       	std	Z+1, r25	; 0x01
     2c2:	80 83       	st	Z, r24
     2c4:	f2 e0       	ldi	r31, 0x02	; 2
     2c6:	ef 0e       	add	r14, r31
     2c8:	f1 1c       	adc	r15, r1
     2ca:	83 e0       	ldi	r24, 0x03	; 3
     2cc:	c8 0e       	add	r12, r24
     2ce:	d1 1c       	adc	r13, r1
 
 /***********************Calculation of inverse kinematics****************************************/

  void calculate_wheel_velocity()
  {
	  for(id=0;id<4;id++)
     2d0:	ea 14       	cp	r14, r10
     2d2:	fb 04       	cpc	r15, r11
     2d4:	e1 f6       	brne	.-72     	; 0x28e <_Z24calculate_wheel_velocityv+0x3c>
     2d6:	83 e0       	ldi	r24, 0x03	; 3
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <jd+0x1>
     2de:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <jd>
     2e2:	0f 2e       	mov	r0, r31
     2e4:	f4 e9       	ldi	r31, 0x94	; 148
     2e6:	cf 2e       	mov	r12, r31
     2e8:	f2 e0       	ldi	r31, 0x02	; 2
     2ea:	df 2e       	mov	r13, r31
     2ec:	f0 2d       	mov	r31, r0
     2ee:	0f 2e       	mov	r0, r31
     2f0:	fc e0       	ldi	r31, 0x0C	; 12
     2f2:	ef 2e       	mov	r14, r31
     2f4:	f2 e0       	ldi	r31, 0x02	; 2
     2f6:	ff 2e       	mov	r15, r31
     2f8:	f0 2d       	mov	r31, r0
		  //velocity_motor[1] = 0;
	  //}
	  
	  for(id=0;id<4;id++)
	  {
		  ocr_motor[id] = (velocity_motor[id]/MAX_RPM)*RPM_COUNT;
     2fa:	69 91       	ld	r22, Y+
     2fc:	79 91       	ld	r23, Y+
     2fe:	07 2e       	mov	r0, r23
     300:	00 0c       	add	r0, r0
     302:	88 0b       	sbc	r24, r24
     304:	99 0b       	sbc	r25, r25
     306:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__floatsisf>
     30a:	20 e0       	ldi	r18, 0x00	; 0
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	4b ee       	ldi	r20, 0xEB	; 235
     310:	53 e4       	ldi	r21, 0x43	; 67
     312:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__divsf3>
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	40 e2       	ldi	r20, 0x20	; 32
     31c:	52 e4       	ldi	r21, 0x42	; 66
     31e:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__mulsf3>
     322:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__fixsfsi>
     326:	f6 01       	movw	r30, r12
     328:	61 93       	st	Z+, r22
     32a:	71 93       	st	Z+, r23
     32c:	6f 01       	movw	r12, r30
	public:
		PID():kp(0),ki(0),kd(0),sp(0),error(0),lastinput(0),errorsum(0){};
		inline void Set_P(float kP){kp = kP;};
		inline void Set_I(float kI){ki = kI;};
		inline void Set_D(float kD){kd = kD;};	
		inline void Set_SP(int sP){sp=sP;};
     32e:	f7 01       	movw	r30, r14
     330:	75 87       	std	Z+13, r23	; 0x0d
     332:	64 87       	std	Z+12, r22	; 0x0c
		  p[id].Set_SP(ocr_motor[id]);
		  velocity_robot[id] = 0;	//reset the robot velocities
     334:	f3 01       	movw	r30, r6
     336:	11 92       	st	Z+, r1
     338:	11 92       	st	Z+, r1
     33a:	3f 01       	movw	r6, r30
     33c:	f8 e1       	ldi	r31, 0x18	; 24
     33e:	ef 0e       	add	r14, r31
     340:	f1 1c       	adc	r15, r1
	  //{
		  //velocity_motor[0] = 0;
		  //velocity_motor[1] = 0;
	  //}
	  
	  for(id=0;id<4;id++)
     342:	ca 15       	cp	r28, r10
     344:	db 05       	cpc	r29, r11
     346:	c9 f6       	brne	.-78     	; 0x2fa <_Z24calculate_wheel_velocityv+0xa8>
     348:	84 e0       	ldi	r24, 0x04	; 4
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <id+0x1>
     350:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <id>
		  velocity_robot[id] = 0;	//reset the robot velocities
	  }
	
	  
	  
  }
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	1f 91       	pop	r17
     35a:	ff 90       	pop	r15
     35c:	ef 90       	pop	r14
     35e:	df 90       	pop	r13
     360:	cf 90       	pop	r12
     362:	bf 90       	pop	r11
     364:	af 90       	pop	r10
     366:	9f 90       	pop	r9
     368:	8f 90       	pop	r8
     36a:	7f 90       	pop	r7
     36c:	6f 90       	pop	r6
     36e:	08 95       	ret

00000370 <_Z21update_wheel_velocityv>:
	/*******************************************Updating the calculated velocity in motors********************************************/
  void update_wheel_velocity()
  {  
		if(pidflag)
     370:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <pidflag>
     374:	88 23       	and	r24, r24
     376:	c9 f1       	breq	.+114    	; 0x3ea <_Z21update_wheel_velocityv+0x7a>
		{
			for(id = 0; id<4 ; id++)
     378:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <id+0x1>
     37c:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <id>
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	90 e0       	ldi	r25, 0x00	; 0
	public:
	Encoder():speed(0),pprcount(0){};
	void Initialise(uint8_t x);
	void Init_Interrupts();
	void Init_Timers();
	inline long int Get_Speed(){return speed;};
     384:	fc 01       	movw	r30, r24
     386:	ee 0f       	add	r30, r30
     388:	ff 1f       	adc	r31, r31
     38a:	ee 0f       	add	r30, r30
     38c:	ff 1f       	adc	r31, r31
     38e:	ee 0f       	add	r30, r30
     390:	ff 1f       	adc	r31, r31
     392:	e8 0f       	add	r30, r24
     394:	f9 1f       	adc	r31, r25
     396:	e4 59       	subi	r30, 0x94	; 148
     398:	fd 4f       	sbci	r31, 0xFD	; 253
			{
				m[id].SetOcrValue(p[id].Compute(e[id].Get_Speed()));
     39a:	61 81       	ldd	r22, Z+1	; 0x01
     39c:	72 81       	ldd	r23, Z+2	; 0x02
     39e:	9c 01       	movw	r18, r24
     3a0:	22 0f       	add	r18, r18
     3a2:	33 1f       	adc	r19, r19
     3a4:	82 0f       	add	r24, r18
     3a6:	93 1f       	adc	r25, r19
     3a8:	88 0f       	add	r24, r24
     3aa:	99 1f       	adc	r25, r25
     3ac:	88 0f       	add	r24, r24
     3ae:	99 1f       	adc	r25, r25
     3b0:	88 0f       	add	r24, r24
     3b2:	99 1f       	adc	r25, r25
     3b4:	84 5f       	subi	r24, 0xF4	; 244
     3b6:	9d 4f       	sbci	r25, 0xFD	; 253
     3b8:	63 d6       	rcall	.+3270   	; 0x1080 <_ZN3PID7ComputeEi>
     3ba:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__fixsfsi>
     3be:	20 91 b0 02 	lds	r18, 0x02B0	; 0x8002b0 <id>
     3c2:	30 91 b1 02 	lds	r19, 0x02B1	; 0x8002b1 <id+0x1>
     3c6:	c9 01       	movw	r24, r18
     3c8:	80 57       	subi	r24, 0x70	; 112
     3ca:	9d 4f       	sbci	r25, 0xFD	; 253
     3cc:	f6 d5       	rcall	.+3052   	; 0xfba <_ZN5Motor11SetOcrValueEi>
	/*******************************************Updating the calculated velocity in motors********************************************/
  void update_wheel_velocity()
  {  
		if(pidflag)
		{
			for(id = 0; id<4 ; id++)
     3ce:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <id>
     3d2:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <id+0x1>
     3d6:	01 96       	adiw	r24, 0x01	; 1
     3d8:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <id+0x1>
     3dc:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <id>
     3e0:	84 30       	cpi	r24, 0x04	; 4
     3e2:	91 05       	cpc	r25, r1
     3e4:	7c f2       	brlt	.-98     	; 0x384 <_Z21update_wheel_velocityv+0x14>
				 //p[3].reset_output();
				 				 	//
				//front_drive = false;
			//}
			
			pidflag = false;
     3e6:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <pidflag>
     3ea:	08 95       	ret

000003ec <__vector_21>:
  //Global timer interrupt
  
  /***********************************Ramping from the joystick analog button*************************************/

  ISR(TIMER0_COMPA_vect)
  {
     3ec:	1f 92       	push	r1
     3ee:	0f 92       	push	r0
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	0f 92       	push	r0
     3f4:	11 24       	eor	r1, r1
     3f6:	8f 93       	push	r24
	  if (rampupflag_start)
     3f8:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <rampupflag_start>
     3fc:	88 23       	and	r24, r24
     3fe:	31 f0       	breq	.+12     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
	  timer_count++;
     400:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <timer_count>
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <timer_count>
     40a:	02 c0       	rjmp	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	  else
	  timer_count = 0;
     40c:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <timer_count>
	  
	  if (timer_count >60)
     410:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <timer_count>
     414:	8d 33       	cpi	r24, 0x3D	; 61
     416:	1c f0       	brlt	.+6      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
	  timer_count = 60;
     418:	8c e3       	ldi	r24, 0x3C	; 60
     41a:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <timer_count>
	  

  }
     41e:	8f 91       	pop	r24
     420:	0f 90       	pop	r0
     422:	0f be       	out	0x3f, r0	; 63
     424:	0f 90       	pop	r0
     426:	1f 90       	pop	r1
     428:	18 95       	reti

0000042a <__vector_1>:
/*********************************************************************Motors encoders interrupts*****************************************************************/

// motor orientation is alternate so channel a and channel b in two sides are different.

ISR(INT_VECT1)
{
     42a:	1f 92       	push	r1
     42c:	0f 92       	push	r0
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	0f 92       	push	r0
     432:	11 24       	eor	r1, r1
     434:	0b b6       	in	r0, 0x3b	; 59
     436:	0f 92       	push	r0
     438:	8f 93       	push	r24
     43a:	9f 93       	push	r25
     43c:	af 93       	push	r26
     43e:	bf 93       	push	r27
     440:	ef 93       	push	r30
     442:	ff 93       	push	r31
	if(bit_is_clear(ENCODER1_CHAPORTPIN,ENCODER1_CHBPIN))		
     444:	00 99       	sbic	0x00, 0	; 0
     446:	0e c0       	rjmp	.+28     	; 0x464 <__vector_1+0x3a>
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
     448:	ec e6       	ldi	r30, 0x6C	; 108
     44a:	f2 e0       	ldi	r31, 0x02	; 2
     44c:	85 81       	ldd	r24, Z+5	; 0x05
     44e:	96 81       	ldd	r25, Z+6	; 0x06
     450:	a7 81       	ldd	r26, Z+7	; 0x07
     452:	b0 85       	ldd	r27, Z+8	; 0x08
     454:	01 96       	adiw	r24, 0x01	; 1
     456:	a1 1d       	adc	r26, r1
     458:	b1 1d       	adc	r27, r1
     45a:	85 83       	std	Z+5, r24	; 0x05
     45c:	96 83       	std	Z+6, r25	; 0x06
     45e:	a7 83       	std	Z+7, r26	; 0x07
     460:	b0 87       	std	Z+8, r27	; 0x08
     462:	0d c0       	rjmp	.+26     	; 0x47e <__vector_1+0x54>
	inline void dcrCount(){pprcount--;};
     464:	ec e6       	ldi	r30, 0x6C	; 108
     466:	f2 e0       	ldi	r31, 0x02	; 2
     468:	85 81       	ldd	r24, Z+5	; 0x05
     46a:	96 81       	ldd	r25, Z+6	; 0x06
     46c:	a7 81       	ldd	r26, Z+7	; 0x07
     46e:	b0 85       	ldd	r27, Z+8	; 0x08
     470:	01 97       	sbiw	r24, 0x01	; 1
     472:	a1 09       	sbc	r26, r1
     474:	b1 09       	sbc	r27, r1
     476:	85 83       	std	Z+5, r24	; 0x05
     478:	96 83       	std	Z+6, r25	; 0x06
     47a:	a7 83       	std	Z+7, r26	; 0x07
     47c:	b0 87       	std	Z+8, r27	; 0x08
		e[0].incCount();
	}
	else
		e[0].dcrCount();
	
}
     47e:	ff 91       	pop	r31
     480:	ef 91       	pop	r30
     482:	bf 91       	pop	r27
     484:	af 91       	pop	r26
     486:	9f 91       	pop	r25
     488:	8f 91       	pop	r24
     48a:	0f 90       	pop	r0
     48c:	0b be       	out	0x3b, r0	; 59
     48e:	0f 90       	pop	r0
     490:	0f be       	out	0x3f, r0	; 63
     492:	0f 90       	pop	r0
     494:	1f 90       	pop	r1
     496:	18 95       	reti

00000498 <__vector_2>:



ISR(INT_VECT2)
{
     498:	1f 92       	push	r1
     49a:	0f 92       	push	r0
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	0f 92       	push	r0
     4a0:	11 24       	eor	r1, r1
     4a2:	0b b6       	in	r0, 0x3b	; 59
     4a4:	0f 92       	push	r0
     4a6:	8f 93       	push	r24
     4a8:	9f 93       	push	r25
     4aa:	af 93       	push	r26
     4ac:	bf 93       	push	r27
     4ae:	ef 93       	push	r30
     4b0:	ff 93       	push	r31
	if(bit_is_clear(ENCODER2_CHAPORTPIN,ENCODER2_CHBPIN))		
     4b2:	02 99       	sbic	0x00, 2	; 0
     4b4:	0e c0       	rjmp	.+28     	; 0x4d2 <__vector_2+0x3a>
	void Initialise(uint8_t x);
	void Init_Interrupts();
	void Init_Timers();
	inline long int Get_Speed(){return speed;};
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
     4b6:	ec e6       	ldi	r30, 0x6C	; 108
     4b8:	f2 e0       	ldi	r31, 0x02	; 2
     4ba:	86 85       	ldd	r24, Z+14	; 0x0e
     4bc:	97 85       	ldd	r25, Z+15	; 0x0f
     4be:	a0 89       	ldd	r26, Z+16	; 0x10
     4c0:	b1 89       	ldd	r27, Z+17	; 0x11
     4c2:	01 96       	adiw	r24, 0x01	; 1
     4c4:	a1 1d       	adc	r26, r1
     4c6:	b1 1d       	adc	r27, r1
     4c8:	86 87       	std	Z+14, r24	; 0x0e
     4ca:	97 87       	std	Z+15, r25	; 0x0f
     4cc:	a0 8b       	std	Z+16, r26	; 0x10
     4ce:	b1 8b       	std	Z+17, r27	; 0x11
     4d0:	0d c0       	rjmp	.+26     	; 0x4ec <__vector_2+0x54>
	inline void dcrCount(){pprcount--;};
     4d2:	ec e6       	ldi	r30, 0x6C	; 108
     4d4:	f2 e0       	ldi	r31, 0x02	; 2
     4d6:	86 85       	ldd	r24, Z+14	; 0x0e
     4d8:	97 85       	ldd	r25, Z+15	; 0x0f
     4da:	a0 89       	ldd	r26, Z+16	; 0x10
     4dc:	b1 89       	ldd	r27, Z+17	; 0x11
     4de:	01 97       	sbiw	r24, 0x01	; 1
     4e0:	a1 09       	sbc	r26, r1
     4e2:	b1 09       	sbc	r27, r1
     4e4:	86 87       	std	Z+14, r24	; 0x0e
     4e6:	97 87       	std	Z+15, r25	; 0x0f
     4e8:	a0 8b       	std	Z+16, r26	; 0x10
     4ea:	b1 8b       	std	Z+17, r27	; 0x11
		e[1].incCount();
	}
	else
		e[1].dcrCount();
	
}
     4ec:	ff 91       	pop	r31
     4ee:	ef 91       	pop	r30
     4f0:	bf 91       	pop	r27
     4f2:	af 91       	pop	r26
     4f4:	9f 91       	pop	r25
     4f6:	8f 91       	pop	r24
     4f8:	0f 90       	pop	r0
     4fa:	0b be       	out	0x3b, r0	; 59
     4fc:	0f 90       	pop	r0
     4fe:	0f be       	out	0x3f, r0	; 63
     500:	0f 90       	pop	r0
     502:	1f 90       	pop	r1
     504:	18 95       	reti

00000506 <__vector_3>:
ISR(INT_VECT3)
{
     506:	1f 92       	push	r1
     508:	0f 92       	push	r0
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	0f 92       	push	r0
     50e:	11 24       	eor	r1, r1
     510:	0b b6       	in	r0, 0x3b	; 59
     512:	0f 92       	push	r0
     514:	8f 93       	push	r24
     516:	9f 93       	push	r25
     518:	af 93       	push	r26
     51a:	bf 93       	push	r27
     51c:	ef 93       	push	r30
     51e:	ff 93       	push	r31
	if(bit_is_set(ENCODER3_CHAPORTPIN,ENCODER3_CHBPIN))		
     520:	04 9b       	sbis	0x00, 4	; 0
     522:	0e c0       	rjmp	.+28     	; 0x540 <__vector_3+0x3a>
	void Initialise(uint8_t x);
	void Init_Interrupts();
	void Init_Timers();
	inline long int Get_Speed(){return speed;};
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
     524:	ec e6       	ldi	r30, 0x6C	; 108
     526:	f2 e0       	ldi	r31, 0x02	; 2
     528:	87 89       	ldd	r24, Z+23	; 0x17
     52a:	90 8d       	ldd	r25, Z+24	; 0x18
     52c:	a1 8d       	ldd	r26, Z+25	; 0x19
     52e:	b2 8d       	ldd	r27, Z+26	; 0x1a
     530:	01 96       	adiw	r24, 0x01	; 1
     532:	a1 1d       	adc	r26, r1
     534:	b1 1d       	adc	r27, r1
     536:	87 8b       	std	Z+23, r24	; 0x17
     538:	90 8f       	std	Z+24, r25	; 0x18
     53a:	a1 8f       	std	Z+25, r26	; 0x19
     53c:	b2 8f       	std	Z+26, r27	; 0x1a
     53e:	0d c0       	rjmp	.+26     	; 0x55a <__vector_3+0x54>
	inline void dcrCount(){pprcount--;};
     540:	ec e6       	ldi	r30, 0x6C	; 108
     542:	f2 e0       	ldi	r31, 0x02	; 2
     544:	87 89       	ldd	r24, Z+23	; 0x17
     546:	90 8d       	ldd	r25, Z+24	; 0x18
     548:	a1 8d       	ldd	r26, Z+25	; 0x19
     54a:	b2 8d       	ldd	r27, Z+26	; 0x1a
     54c:	01 97       	sbiw	r24, 0x01	; 1
     54e:	a1 09       	sbc	r26, r1
     550:	b1 09       	sbc	r27, r1
     552:	87 8b       	std	Z+23, r24	; 0x17
     554:	90 8f       	std	Z+24, r25	; 0x18
     556:	a1 8f       	std	Z+25, r26	; 0x19
     558:	b2 8f       	std	Z+26, r27	; 0x1a
	{
		e[2].incCount();
	}
	else
		e[2].dcrCount();
}
     55a:	ff 91       	pop	r31
     55c:	ef 91       	pop	r30
     55e:	bf 91       	pop	r27
     560:	af 91       	pop	r26
     562:	9f 91       	pop	r25
     564:	8f 91       	pop	r24
     566:	0f 90       	pop	r0
     568:	0b be       	out	0x3b, r0	; 59
     56a:	0f 90       	pop	r0
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	0f 90       	pop	r0
     570:	1f 90       	pop	r1
     572:	18 95       	reti

00000574 <__vector_4>:

ISR(INT_VECT4)
{
     574:	1f 92       	push	r1
     576:	0f 92       	push	r0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	0f 92       	push	r0
     57c:	11 24       	eor	r1, r1
     57e:	0b b6       	in	r0, 0x3b	; 59
     580:	0f 92       	push	r0
     582:	8f 93       	push	r24
     584:	9f 93       	push	r25
     586:	af 93       	push	r26
     588:	bf 93       	push	r27
     58a:	ef 93       	push	r30
     58c:	ff 93       	push	r31
	if(bit_is_set(ENCODER4_CHAPORTPIN,ENCODER4_CHBPIN))		
     58e:	06 9b       	sbis	0x00, 6	; 0
     590:	0e c0       	rjmp	.+28     	; 0x5ae <__vector_4+0x3a>
	void Initialise(uint8_t x);
	void Init_Interrupts();
	void Init_Timers();
	inline long int Get_Speed(){return speed;};
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
     592:	ec e6       	ldi	r30, 0x6C	; 108
     594:	f2 e0       	ldi	r31, 0x02	; 2
     596:	80 a1       	ldd	r24, Z+32	; 0x20
     598:	91 a1       	ldd	r25, Z+33	; 0x21
     59a:	a2 a1       	ldd	r26, Z+34	; 0x22
     59c:	b3 a1       	ldd	r27, Z+35	; 0x23
     59e:	01 96       	adiw	r24, 0x01	; 1
     5a0:	a1 1d       	adc	r26, r1
     5a2:	b1 1d       	adc	r27, r1
     5a4:	80 a3       	std	Z+32, r24	; 0x20
     5a6:	91 a3       	std	Z+33, r25	; 0x21
     5a8:	a2 a3       	std	Z+34, r26	; 0x22
     5aa:	b3 a3       	std	Z+35, r27	; 0x23
     5ac:	0d c0       	rjmp	.+26     	; 0x5c8 <__vector_4+0x54>
	inline void dcrCount(){pprcount--;};
     5ae:	ec e6       	ldi	r30, 0x6C	; 108
     5b0:	f2 e0       	ldi	r31, 0x02	; 2
     5b2:	80 a1       	ldd	r24, Z+32	; 0x20
     5b4:	91 a1       	ldd	r25, Z+33	; 0x21
     5b6:	a2 a1       	ldd	r26, Z+34	; 0x22
     5b8:	b3 a1       	ldd	r27, Z+35	; 0x23
     5ba:	01 97       	sbiw	r24, 0x01	; 1
     5bc:	a1 09       	sbc	r26, r1
     5be:	b1 09       	sbc	r27, r1
     5c0:	80 a3       	std	Z+32, r24	; 0x20
     5c2:	91 a3       	std	Z+33, r25	; 0x21
     5c4:	a2 a3       	std	Z+34, r26	; 0x22
     5c6:	b3 a3       	std	Z+35, r27	; 0x23
	{
		e[3].incCount();
	}
	else
		e[3].dcrCount();
}
     5c8:	ff 91       	pop	r31
     5ca:	ef 91       	pop	r30
     5cc:	bf 91       	pop	r27
     5ce:	af 91       	pop	r26
     5d0:	9f 91       	pop	r25
     5d2:	8f 91       	pop	r24
     5d4:	0f 90       	pop	r0
     5d6:	0b be       	out	0x3b, r0	; 59
     5d8:	0f 90       	pop	r0
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	0f 90       	pop	r0
     5de:	1f 90       	pop	r1
     5e0:	18 95       	reti

000005e2 <_GLOBAL__sub_I_coupling_matrix>:
     5e2:	ec e6       	ldi	r30, 0x6C	; 108
     5e4:	f2 e0       	ldi	r31, 0x02	; 2
     5e6:	80 e9       	ldi	r24, 0x90	; 144
     5e8:	92 e0       	ldi	r25, 0x02	; 2
	private:
		uint8_t no;
		long int speed;
		long int pprcount;
	public:
	Encoder():speed(0),pprcount(0){};
     5ea:	11 82       	std	Z+1, r1	; 0x01
     5ec:	12 82       	std	Z+2, r1	; 0x02
     5ee:	13 82       	std	Z+3, r1	; 0x03
     5f0:	14 82       	std	Z+4, r1	; 0x04
     5f2:	15 82       	std	Z+5, r1	; 0x05
     5f4:	16 82       	std	Z+6, r1	; 0x06
     5f6:	17 82       	std	Z+7, r1	; 0x07
     5f8:	10 86       	std	Z+8, r1	; 0x08
     5fa:	39 96       	adiw	r30, 0x09	; 9
 uint16_t robot_rpm;		       //manual robot rpm set
 int velocity_motor[4];		//individual motor velocity
 int velocity_robot[4];		//robot velocity
 int ocr_motor[4];			//motor ocr 
 Motor m[4];				//base motors
 Encoder e[4];				// base motors encoders
     5fc:	e8 17       	cp	r30, r24
     5fe:	f9 07       	cpc	r31, r25
     600:	a1 f7       	brne	.-24     	; 0x5ea <_GLOBAL__sub_I_coupling_matrix+0x8>
     602:	ec e0       	ldi	r30, 0x0C	; 12
     604:	f2 e0       	ldi	r31, 0x02	; 2
     606:	8c e6       	ldi	r24, 0x6C	; 108
     608:	92 e0       	ldi	r25, 0x02	; 2
		int sp; 
		int error , lastinput , errorsum;
		float cv;
		
	public:
		PID():kp(0),ki(0),kd(0),sp(0),error(0),lastinput(0),errorsum(0){};
     60a:	10 82       	st	Z, r1
     60c:	11 82       	std	Z+1, r1	; 0x01
     60e:	12 82       	std	Z+2, r1	; 0x02
     610:	13 82       	std	Z+3, r1	; 0x03
     612:	14 82       	std	Z+4, r1	; 0x04
     614:	15 82       	std	Z+5, r1	; 0x05
     616:	16 82       	std	Z+6, r1	; 0x06
     618:	17 82       	std	Z+7, r1	; 0x07
     61a:	10 86       	std	Z+8, r1	; 0x08
     61c:	11 86       	std	Z+9, r1	; 0x09
     61e:	12 86       	std	Z+10, r1	; 0x0a
     620:	13 86       	std	Z+11, r1	; 0x0b
     622:	15 86       	std	Z+13, r1	; 0x0d
     624:	14 86       	std	Z+12, r1	; 0x0c
     626:	17 86       	std	Z+15, r1	; 0x0f
     628:	16 86       	std	Z+14, r1	; 0x0e
     62a:	11 8a       	std	Z+17, r1	; 0x11
     62c:	10 8a       	std	Z+16, r1	; 0x10
     62e:	13 8a       	std	Z+19, r1	; 0x13
     630:	12 8a       	std	Z+18, r1	; 0x12
     632:	78 96       	adiw	r30, 0x18	; 24
 PID p[4];					//pid for the base motors
     634:	e8 17       	cp	r30, r24
     636:	f9 07       	cpc	r31, r25
     638:	41 f7       	brne	.-48     	; 0x60a <_GLOBAL__sub_I_coupling_matrix+0x28>
	{
		e[3].incCount();
	}
	else
		e[3].dcrCount();
}
     63a:	08 95       	ret

0000063c <_ZN7Encoder15Init_InterruptsEv>:
	Init_Timers();
}

void Encoder::Init_Interrupts()
{
	sei();
     63c:	78 94       	sei
	if(no==1)
     63e:	fc 01       	movw	r30, r24
     640:	80 81       	ld	r24, Z
     642:	81 30       	cpi	r24, 0x01	; 1
     644:	49 f4       	brne	.+18     	; 0x658 <_ZN7Encoder15Init_InterruptsEv+0x1c>
	{
		EIMSK &= ~(1<<ENCODER1_INT);
     646:	e8 98       	cbi	0x1d, 0	; 29
		EICRA |= (1<<INT1_ISC1);	//falling edge
     648:	e9 e6       	ldi	r30, 0x69	; 105
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	80 81       	ld	r24, Z
     64e:	82 60       	ori	r24, 0x02	; 2
     650:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODER1_INT);		//setting INT pin
     652:	e8 9a       	sbi	0x1d, 0	; 29
		EIFR |= (1<<INT1_INTF);	    //clear int flag
     654:	e0 9a       	sbi	0x1c, 0	; 28
     656:	08 95       	ret
	}
	else if (no==2)
     658:	82 30       	cpi	r24, 0x02	; 2
     65a:	49 f4       	brne	.+18     	; 0x66e <_ZN7Encoder15Init_InterruptsEv+0x32>
	{
		EIMSK &= ~(1<<ENCODER2_INT);
     65c:	e9 98       	cbi	0x1d, 1	; 29
		EICRA |= (1<<INT2_ISC1);	//falling edge
     65e:	e9 e6       	ldi	r30, 0x69	; 105
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	88 60       	ori	r24, 0x08	; 8
     666:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODER2_INT);		//setting INT pin
     668:	e9 9a       	sbi	0x1d, 1	; 29
		EIFR |= (1<<INT2_INTF);	    //clear int flag
     66a:	e1 9a       	sbi	0x1c, 1	; 28
     66c:	08 95       	ret
	}
	else if (no==3)
     66e:	83 30       	cpi	r24, 0x03	; 3
     670:	49 f4       	brne	.+18     	; 0x684 <_ZN7Encoder15Init_InterruptsEv+0x48>
	{
		EIMSK &= ~(1<<ENCODER3_INT);
     672:	ea 98       	cbi	0x1d, 2	; 29
		EICRA |= (1<<INT3_ISC1);	//falling edge
     674:	e9 e6       	ldi	r30, 0x69	; 105
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	80 81       	ld	r24, Z
     67a:	80 62       	ori	r24, 0x20	; 32
     67c:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODER3_INT);		//setting INT pin
     67e:	ea 9a       	sbi	0x1d, 2	; 29
		EIFR |= (1<<INT3_INTF);	    //clear int flag
     680:	e2 9a       	sbi	0x1c, 2	; 28
     682:	08 95       	ret
	}
	else if (no==4)
     684:	84 30       	cpi	r24, 0x04	; 4
     686:	41 f4       	brne	.+16     	; 0x698 <_ZN7Encoder15Init_InterruptsEv+0x5c>
	{
		EIMSK &= ~(1<<ENCODER4_INT);
     688:	eb 98       	cbi	0x1d, 3	; 29
		EICRA |= (1<<INT4_ISC1);	//falling edge
     68a:	e9 e6       	ldi	r30, 0x69	; 105
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	80 81       	ld	r24, Z
     690:	80 68       	ori	r24, 0x80	; 128
     692:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODER4_INT);		//setting INT pin
     694:	eb 9a       	sbi	0x1d, 3	; 29
		EIFR |= (1<<INT4_INTF);	    //clear int flag
     696:	e3 9a       	sbi	0x1c, 3	; 28
     698:	08 95       	ret

0000069a <_ZN7Encoder11Init_TimersEv>:
}

void Encoder::Init_Timers()
{
	static bool was_initialized = false;
	if(!was_initialized)
     69a:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <_ZZN7Encoder11Init_TimersEvE15was_initialized>
     69e:	81 11       	cpse	r24, r1
     6a0:	17 c0       	rjmp	.+46     	; 0x6d0 <_ZN7Encoder11Init_TimersEv+0x36>
	{
		TCCR4B |= ((1<<WGM42)|(1<<CS40)|(1<<CS41)); //CTC mode and prescaler of 64
     6a2:	e1 ea       	ldi	r30, 0xA1	; 161
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	80 81       	ld	r24, Z
     6a8:	8b 60       	ori	r24, 0x0B	; 11
     6aa:	80 83       	st	Z, r24
		TIMSK4 |= (1<<OCIE4A);
     6ac:	e2 e7       	ldi	r30, 0x72	; 114
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	80 81       	ld	r24, Z
     6b2:	82 60       	ori	r24, 0x02	; 2
     6b4:	80 83       	st	Z, r24
		OCR4A  = 125*DELAYTIMEMS;
     6b6:	86 ea       	ldi	r24, 0xA6	; 166
     6b8:	9e e0       	ldi	r25, 0x0E	; 14
     6ba:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     6be:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
		TCNT4 = 0;
     6c2:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
     6c6:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
		was_initialized = true;
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <_ZZN7Encoder11Init_TimersEvE15was_initialized>
     6d0:	08 95       	ret

000006d2 <_ZN7Encoder10InitialiseEh>:


#include "Encoder.h"

void Encoder::Initialise(uint8_t x)
{	
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	ec 01       	movw	r28, r24
	no = x;
     6d8:	68 83       	st	Y, r22
	if(no==1)
     6da:	61 30       	cpi	r22, 0x01	; 1
     6dc:	29 f4       	brne	.+10     	; 0x6e8 <_ZN7Encoder10InitialiseEh+0x16>
	{
		INPUT(ENCODER1_CHANNELA);
     6de:	50 98       	cbi	0x0a, 0	; 10
		INPUT(ENCODER1_CHANNELB);
     6e0:	08 98       	cbi	0x01, 0	; 1
		SET(ENCODER1_CHANNELA);
     6e2:	58 9a       	sbi	0x0b, 0	; 11
		SET(ENCODER1_CHANNELB);
     6e4:	10 9a       	sbi	0x02, 0	; 2
     6e6:	14 c0       	rjmp	.+40     	; 0x710 <_ZN7Encoder10InitialiseEh+0x3e>
	}
	else if(no==2)
     6e8:	62 30       	cpi	r22, 0x02	; 2
     6ea:	29 f4       	brne	.+10     	; 0x6f6 <_ZN7Encoder10InitialiseEh+0x24>
	{
		INPUT(ENCODER2_CHANNELA);
     6ec:	51 98       	cbi	0x0a, 1	; 10
		INPUT(ENCODER2_CHANNELB);
     6ee:	0a 98       	cbi	0x01, 2	; 1
		SET(ENCODER2_CHANNELA);
     6f0:	59 9a       	sbi	0x0b, 1	; 11
		SET(ENCODER2_CHANNELB);
     6f2:	12 9a       	sbi	0x02, 2	; 2
     6f4:	0d c0       	rjmp	.+26     	; 0x710 <_ZN7Encoder10InitialiseEh+0x3e>
	}
	else if (no==3)
     6f6:	63 30       	cpi	r22, 0x03	; 3
     6f8:	29 f4       	brne	.+10     	; 0x704 <_ZN7Encoder10InitialiseEh+0x32>
	{
		INPUT(ENCODER3_CHANNELA);
     6fa:	52 98       	cbi	0x0a, 2	; 10
		INPUT(ENCODER3_CHANNELB);
     6fc:	0c 98       	cbi	0x01, 4	; 1
		SET(ENCODER3_CHANNELA);
     6fe:	5a 9a       	sbi	0x0b, 2	; 11
		SET(ENCODER3_CHANNELB);
     700:	14 9a       	sbi	0x02, 4	; 2
     702:	06 c0       	rjmp	.+12     	; 0x710 <_ZN7Encoder10InitialiseEh+0x3e>
	}
	else if(no==4)
     704:	64 30       	cpi	r22, 0x04	; 4
     706:	21 f4       	brne	.+8      	; 0x710 <_ZN7Encoder10InitialiseEh+0x3e>
	{
		INPUT(ENCODER4_CHANNELA);
     708:	53 98       	cbi	0x0a, 3	; 10
		INPUT(ENCODER4_CHANNELB);
     70a:	0e 98       	cbi	0x01, 6	; 1
		SET(ENCODER4_CHANNELA);
     70c:	5b 9a       	sbi	0x0b, 3	; 11
		SET(ENCODER4_CHANNELB);
     70e:	16 9a       	sbi	0x02, 6	; 2
	}
	Init_Interrupts();
     710:	ce 01       	movw	r24, r28
     712:	94 df       	rcall	.-216    	; 0x63c <_ZN7Encoder15Init_InterruptsEv>
	Init_Timers();
     714:	ce 01       	movw	r24, r28
     716:	c1 df       	rcall	.-126    	; 0x69a <_ZN7Encoder11Init_TimersEv>
}
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	08 95       	ret

0000071e <_Z7operatev>:
#include "Pneumatic.h"



 void operate()
 {
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
	 /**********************************************GAMEBUTTONB_SECTION*********************************/
	 
	 
	 
	 if (GAMEBUTTONB == RIGHT)
     726:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <rcvdata+0x1>
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	69 f4       	brne	.+26     	; 0x748 <_Z7operatev+0x2a>
	 {
		 velocity_robot[0] = 0;
     72e:	ec e9       	ldi	r30, 0x9C	; 156
     730:	f2 e0       	ldi	r31, 0x02	; 2
     732:	11 82       	std	Z+1, r1	; 0x01
     734:	10 82       	st	Z, r1
		 velocity_robot[1] = robot_rpm;
     736:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <robot_rpm>
     73a:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <robot_rpm+0x1>
     73e:	93 83       	std	Z+3, r25	; 0x03
     740:	82 83       	std	Z+2, r24	; 0x02
		 velocity_robot[2] = 0;
     742:	15 82       	std	Z+5, r1	; 0x05
     744:	14 82       	std	Z+4, r1	; 0x04
     746:	32 c0       	rjmp	.+100    	; 0x7ac <_Z7operatev+0x8e>
	 }
	 else if (GAMEBUTTONB == LEFT)
     748:	88 30       	cpi	r24, 0x08	; 8
     74a:	81 f4       	brne	.+32     	; 0x76c <_Z7operatev+0x4e>
	 {
		 velocity_robot[0] = 0;
     74c:	ec e9       	ldi	r30, 0x9C	; 156
     74e:	f2 e0       	ldi	r31, 0x02	; 2
     750:	11 82       	std	Z+1, r1	; 0x01
     752:	10 82       	st	Z, r1
		 velocity_robot[1] = -robot_rpm;
     754:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <robot_rpm>
     758:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <robot_rpm+0x1>
     75c:	91 95       	neg	r25
     75e:	81 95       	neg	r24
     760:	91 09       	sbc	r25, r1
     762:	93 83       	std	Z+3, r25	; 0x03
     764:	82 83       	std	Z+2, r24	; 0x02
		 velocity_robot[2] = 0;
     766:	15 82       	std	Z+5, r1	; 0x05
     768:	14 82       	std	Z+4, r1	; 0x04
     76a:	20 c0       	rjmp	.+64     	; 0x7ac <_Z7operatev+0x8e>
	 }
	 else if (GAMEBUTTONB == UP)
     76c:	81 30       	cpi	r24, 0x01	; 1
     76e:	81 f4       	brne	.+32     	; 0x790 <_Z7operatev+0x72>
	 {
		 velocity_robot[0] = -robot_rpm;
     770:	ec e9       	ldi	r30, 0x9C	; 156
     772:	f2 e0       	ldi	r31, 0x02	; 2
     774:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <robot_rpm>
     778:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <robot_rpm+0x1>
     77c:	91 95       	neg	r25
     77e:	81 95       	neg	r24
     780:	91 09       	sbc	r25, r1
     782:	91 83       	std	Z+1, r25	; 0x01
     784:	80 83       	st	Z, r24
		 velocity_robot[1] = 0;
     786:	13 82       	std	Z+3, r1	; 0x03
     788:	12 82       	std	Z+2, r1	; 0x02
		 velocity_robot[2] = 0;
     78a:	15 82       	std	Z+5, r1	; 0x05
     78c:	14 82       	std	Z+4, r1	; 0x04
     78e:	0e c0       	rjmp	.+28     	; 0x7ac <_Z7operatev+0x8e>
		 //front_drive = true;
		 
	 }
	 else if (GAMEBUTTONB == DOWN)
     790:	84 30       	cpi	r24, 0x04	; 4
     792:	61 f4       	brne	.+24     	; 0x7ac <_Z7operatev+0x8e>
	 {
		 velocity_robot[0] = robot_rpm;
     794:	ec e9       	ldi	r30, 0x9C	; 156
     796:	f2 e0       	ldi	r31, 0x02	; 2
     798:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <robot_rpm>
     79c:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <robot_rpm+0x1>
     7a0:	91 83       	std	Z+1, r25	; 0x01
     7a2:	80 83       	st	Z, r24
		 velocity_robot[1] = 0;
     7a4:	13 82       	std	Z+3, r1	; 0x03
     7a6:	12 82       	std	Z+2, r1	; 0x02
		 velocity_robot[2] = 0;
     7a8:	15 82       	std	Z+5, r1	; 0x05
     7aa:	14 82       	std	Z+4, r1	; 0x04
		 //back_drive = true;
	 }
	 
	 /**********************************************************************GAMEBUTTONA_SECTION****************************/
	 if (GAMEBUTTONA == BUTTON_A)
     7ac:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <rcvdata>
     7b0:	81 30       	cpi	r24, 0x01	; 1
     7b2:	31 f4       	brne	.+12     	; 0x7c0 <_Z7operatev+0xa2>
	 {
		 RACK_GRIP_TOGGLE();
     7b4:	91 b3       	in	r25, 0x11	; 17
     7b6:	89 27       	eor	r24, r25
     7b8:	81 bb       	out	0x11, r24	; 17
		 GAMEBUTTONA = 0;
     7ba:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <rcvdata>
     7be:	7d c0       	rjmp	.+250    	; 0x8ba <_Z7operatev+0x19c>
	 }
	 else if (GAMEBUTTONA == BUTTON_B && !Rack_home_position)
     7c0:	82 30       	cpi	r24, 0x02	; 2
     7c2:	51 f4       	brne	.+20     	; 0x7d8 <_Z7operatev+0xba>
     7c4:	90 91 be 02 	lds	r25, 0x02BE	; 0x8002be <Rack_home_position>
     7c8:	91 11       	cpse	r25, r1
     7ca:	40 c0       	rjmp	.+128    	; 0x84c <_Z7operatev+0x12e>
	 {
		 RACK_LIFT_TOGGLE();
     7cc:	91 b3       	in	r25, 0x11	; 17
     7ce:	89 27       	eor	r24, r25
     7d0:	81 bb       	out	0x11, r24	; 17
		 GAMEBUTTONA = 0;
     7d2:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <rcvdata>
     7d6:	71 c0       	rjmp	.+226    	; 0x8ba <_Z7operatev+0x19c>
	 }
	 else if (GAMEBUTTONA == BUTTON_X)
     7d8:	84 30       	cpi	r24, 0x04	; 4
     7da:	a9 f4       	brne	.+42     	; 0x806 <_Z7operatev+0xe8>
	 {
		 Buttonx_pressed = true;
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <Buttonx_pressed>
		 if(Rack_home_position)
     7e2:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <Rack_home_position>
     7e6:	88 23       	and	r24, r24
     7e8:	31 f0       	breq	.+12     	; 0x7f6 <_Z7operatev+0xd8>
		 {
			 RackMotor.SetOcrValue(-RACK_SPEED_MOTOR);
     7ea:	67 e0       	ldi	r22, 0x07	; 7
     7ec:	7f ef       	ldi	r23, 0xFF	; 255
     7ee:	8b e0       	ldi	r24, 0x0B	; 11
     7f0:	93 e0       	ldi	r25, 0x03	; 3
     7f2:	c7 d7       	rcall	.+3982   	; 0x1782 <_ZN10Rack_Motor11SetOcrValueEi>
     7f4:	05 c0       	rjmp	.+10     	; 0x800 <_Z7operatev+0xe2>
		 }
		 else
		 {
			 RackMotor.SetOcrValue(RACK_SPEED_MOTOR);
     7f6:	69 ef       	ldi	r22, 0xF9	; 249
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	8b e0       	ldi	r24, 0x0B	; 11
     7fc:	93 e0       	ldi	r25, 0x03	; 3
     7fe:	c1 d7       	rcall	.+3970   	; 0x1782 <_ZN10Rack_Motor11SetOcrValueEi>
		 }
		 GAMEBUTTONA = 0;
     800:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <rcvdata>
     804:	5a c0       	rjmp	.+180    	; 0x8ba <_Z7operatev+0x19c>
	 }
	 else if (GAMEBUTTONA == BUTTON_Y)
     806:	88 30       	cpi	r24, 0x08	; 8
     808:	61 f4       	brne	.+24     	; 0x822 <_Z7operatev+0x104>
		inline void Set_P(float kP){kp = kP;};
		inline void Set_I(float kI){ki = kI;};
		inline void Set_D(float kD){kd = kD;};	
		inline void Set_SP(int sP){sp=sP;};
     80a:	88 e6       	ldi	r24, 0x68	; 104
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <angle_pid+0xd>
     812:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <angle_pid+0xc>
	 {
		 angle_pid.Set_SP(360);
		 Geneva_Start = true;
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <Geneva_Start>
		 GAMEBUTTONA = 0;
     81c:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <rcvdata>
     820:	4c c0       	rjmp	.+152    	; 0x8ba <_Z7operatev+0x19c>
	 }
	 else if (GAMEBUTTONA == RIGHT_STICK_CLICK && !Rack_home_position)
     822:	80 31       	cpi	r24, 0x10	; 16
     824:	99 f4       	brne	.+38     	; 0x84c <_Z7operatev+0x12e>
     826:	90 91 be 02 	lds	r25, 0x02BE	; 0x8002be <Rack_home_position>
     82a:	91 11       	cpse	r25, r1
     82c:	0f c0       	rjmp	.+30     	; 0x84c <_Z7operatev+0x12e>
	 {
		 Buttonx_pressed = true;
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <Buttonx_pressed>
		 rack_throw_auto = true;
     834:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <rack_throw_auto>
		 SHUTTCOCK_PASS_OPEN();
     838:	8d 9a       	sbi	0x11, 5	; 17
		 RACK_LIFT_OPEN();
     83a:	89 9a       	sbi	0x11, 1	; 17
		 RackMotor.SetOcrValue(RACK_SPEED_MOTOR);
     83c:	69 ef       	ldi	r22, 0xF9	; 249
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	8b e0       	ldi	r24, 0x0B	; 11
     842:	93 e0       	ldi	r25, 0x03	; 3
     844:	9e d7       	rcall	.+3900   	; 0x1782 <_ZN10Rack_Motor11SetOcrValueEi>
		 GAMEBUTTONA = 0;
     846:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <rcvdata>
     84a:	37 c0       	rjmp	.+110    	; 0x8ba <_Z7operatev+0x19c>
	 }
	 else if (!pass_the_shuttcock && !rack_throw_auto && !pneumatic_geneva_start && GAMEBUTTONA == RIGHT_BUTTON)	//until the shuttlecock passing completes and until rack auto rack throw completes and until the geneva completes it's rotation
     84c:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <pass_the_shuttcock>
     850:	91 11       	cpse	r25, r1
     852:	33 c0       	rjmp	.+102    	; 0x8ba <_Z7operatev+0x19c>
     854:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <rack_throw_auto>
     858:	91 11       	cpse	r25, r1
     85a:	2f c0       	rjmp	.+94     	; 0x8ba <_Z7operatev+0x19c>
     85c:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <pneumatic_geneva_start>
     860:	91 11       	cpse	r25, r1
     862:	2b c0       	rjmp	.+86     	; 0x8ba <_Z7operatev+0x19c>
     864:	80 32       	cpi	r24, 0x20	; 32
     866:	49 f5       	brne	.+82     	; 0x8ba <_Z7operatev+0x19c>
	 {
		 if(inside_robot)
     868:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <inside_robot>
     86c:	88 23       	and	r24, r24
     86e:	89 f0       	breq	.+34     	; 0x892 <_Z7operatev+0x174>
		 {
			 pneumatic_geneva_start = true;
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <pneumatic_geneva_start>
			 pneumatic_geneva_time = millis();
     876:	fd d4       	rcall	.+2554   	; 0x1272 <_Z6millisv>
     878:	60 93 e8 02 	sts	0x02E8, r22	; 0x8002e8 <pneumatic_geneva_time>
     87c:	70 93 e9 02 	sts	0x02E9, r23	; 0x8002e9 <pneumatic_geneva_time+0x1>
     880:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <pneumatic_geneva_time+0x2>
     884:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <pneumatic_geneva_time+0x3>
			 SHUTTCOCK_GRIP_TOGGLE();
     888:	91 b3       	in	r25, 0x11	; 17
     88a:	80 e1       	ldi	r24, 0x10	; 16
     88c:	89 27       	eor	r24, r25
     88e:	81 bb       	out	0x11, r24	; 17
     890:	01 c0       	rjmp	.+2      	; 0x894 <_Z7operatev+0x176>
		 }
		 else
		 {
			 SHUTTCOCK_GRIP_CLOSE();
     892:	8c 98       	cbi	0x11, 4	; 17
		 }
		 
		 pass_the_shuttcock = true;
     894:	c1 e0       	ldi	r28, 0x01	; 1
     896:	c0 93 b7 02 	sts	0x02B7, r28	; 0x8002b7 <pass_the_shuttcock>
		 passing_time = millis();
     89a:	eb d4       	rcall	.+2518   	; 0x1272 <_Z6millisv>
     89c:	60 93 e4 02 	sts	0x02E4, r22	; 0x8002e4 <passing_time>
     8a0:	70 93 e5 02 	sts	0x02E5, r23	; 0x8002e5 <passing_time+0x1>
     8a4:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <passing_time+0x2>
     8a8:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <passing_time+0x3>
		 inside_robot = (1^inside_robot);
     8ac:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <inside_robot>
     8b0:	c8 27       	eor	r28, r24
     8b2:	c0 93 b8 02 	sts	0x02B8, r28	; 0x8002b8 <inside_robot>
		 GAMEBUTTONA = 0;
     8b6:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <rcvdata>

	 
	 

	 /**************************************************Rack Operation******************************************************/
	 if (!Buttonx_pressed)
     8ba:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <Buttonx_pressed>
     8be:	81 11       	cpse	r24, r1
     8c0:	13 c0       	rjmp	.+38     	; 0x8e8 <_Z7operatev+0x1ca>
	 {
		 if (LEFTTRIGGER > 20 && READ(LIMIT_SWITCH_PIN))
     8c2:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <rcvdata+0x3>
     8c6:	85 31       	cpi	r24, 0x15	; 21
     8c8:	0c f4       	brge	.+2      	; 0x8cc <_Z7operatev+0x1ae>
     8ca:	dd c1       	rjmp	.+954    	; 0xc86 <_Z7operatev+0x568>
     8cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     8d0:	83 fd       	sbrc	r24, 3
     8d2:	d3 c1       	rjmp	.+934    	; 0xc7a <_Z7operatev+0x55c>
     8d4:	d8 c1       	rjmp	.+944    	; 0xc86 <_Z7operatev+0x568>
		 {
			 RackMotor.SetOcrValue(RACK_SPEED_MOTOR);
		 }
		 else if (RIGHTTRIGGER > 20 )
		 {
			 RackMotor.SetOcrValue(-RACK_SPEED_MOTOR);
     8d6:	67 e0       	ldi	r22, 0x07	; 7
     8d8:	7f ef       	ldi	r23, 0xFF	; 255
     8da:	8b e0       	ldi	r24, 0x0B	; 11
     8dc:	93 e0       	ldi	r25, 0x03	; 3
     8de:	51 d7       	rcall	.+3746   	; 0x1782 <_ZN10Rack_Motor11SetOcrValueEi>
		 }
		 else
		 RackMotor.StopMotor();
     8e0:	03 c0       	rjmp	.+6      	; 0x8e8 <_Z7operatev+0x1ca>
     8e2:	8b e0       	ldi	r24, 0x0B	; 11
     8e4:	93 e0       	ldi	r25, 0x03	; 3
     8e6:	30 d7       	rcall	.+3680   	; 0x1748 <_ZN10Rack_Motor9StopMotorEv>
	inline void Calc_Speed();
	inline long int Get_Speed(){return speed;};
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
	inline void dcrCount(){pprcount--;};
	inline int Get_count(){return pprcount;};
     8e8:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <RackEncoder+0x5>
     8ec:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <RackEncoder+0x6>
     8f0:	a0 91 04 03 	lds	r26, 0x0304	; 0x800304 <RackEncoder+0x7>
     8f4:	b0 91 05 03 	lds	r27, 0x0305	; 0x800305 <RackEncoder+0x8>
	 }
	 

	 if (RackEncoder.Get_count() <= RACK_POSITION_COUNT && Rack_home_position) // if reached at mid-where somewhere
     8f8:	8d 39       	cpi	r24, 0x9D	; 157
     8fa:	9f 4f       	sbci	r25, 0xFF	; 255
     8fc:	24 f4       	brge	.+8      	; 0x906 <_Z7operatev+0x1e8>
     8fe:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <Rack_home_position>
     902:	81 11       	cpse	r24, r1
     904:	c6 c1       	rjmp	.+908    	; 0xc92 <_Z7operatev+0x574>
     906:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <RackEncoder+0x5>
     90a:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <RackEncoder+0x6>
     90e:	a0 91 04 03 	lds	r26, 0x0304	; 0x800304 <RackEncoder+0x7>
     912:	b0 91 05 03 	lds	r27, 0x0305	; 0x800305 <RackEncoder+0x8>
	 {
		 Rack_home_position = false;
		 donotstop = true;
	 }
	 
	 if(RackEncoder.Get_count() <= RACK_COUNT && Buttonx_pressed && donotstop  )		//reached final position
     916:	89 33       	cpi	r24, 0x39	; 57
     918:	9f 4f       	sbci	r25, 0xFF	; 255
     91a:	9c f4       	brge	.+38     	; 0x942 <_Z7operatev+0x224>
     91c:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <Buttonx_pressed>
     920:	88 23       	and	r24, r24
     922:	79 f0       	breq	.+30     	; 0x942 <_Z7operatev+0x224>
     924:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <donotstop>
     928:	81 11       	cpse	r24, r1
     92a:	b9 c1       	rjmp	.+882    	; 0xc9e <_Z7operatev+0x580>
     92c:	0a c0       	rjmp	.+20     	; 0x942 <_Z7operatev+0x224>
		 RackMotor.StopMotor();
		 Buttonx_pressed = false;
		 donotstop = false;
		 if (rack_throw_auto)
		 {
			 RACK_LIFT_CLOSE();
     92e:	89 98       	cbi	0x11, 1	; 17
     930:	88 e6       	ldi	r24, 0x68	; 104
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <angle_pid+0xd>
     938:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <angle_pid+0xc>
			 angle_pid.Set_SP(360);
			 Geneva_Start = true;
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <Geneva_Start>
		 }
	 }
	 /*********************************************************************Move using joystick analog stick********************************************/
	 	 if ((abs(LEFTSTICKY-50) > 5) || (abs(LEFTSTICKX-50) > 5) || abs(RIGHTSTICKX-50)>5)
     942:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <rcvdata+0x5>
     946:	08 2e       	mov	r0, r24
     948:	00 0c       	add	r0, r0
     94a:	99 0b       	sbc	r25, r25
     94c:	9c 01       	movw	r18, r24
     94e:	22 53       	subi	r18, 0x32	; 50
     950:	31 09       	sbc	r19, r1
     952:	12 16       	cp	r1, r18
     954:	13 06       	cpc	r1, r19
     956:	24 f4       	brge	.+8      	; 0x960 <_Z7operatev+0x242>
     958:	26 30       	cpi	r18, 0x06	; 6
     95a:	31 05       	cpc	r19, r1
     95c:	b4 f5       	brge	.+108    	; 0x9ca <_Z7operatev+0x2ac>
     95e:	07 c0       	rjmp	.+14     	; 0x96e <_Z7operatev+0x250>
     960:	22 e3       	ldi	r18, 0x32	; 50
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	28 1b       	sub	r18, r24
     966:	39 0b       	sbc	r19, r25
     968:	26 30       	cpi	r18, 0x06	; 6
     96a:	31 05       	cpc	r19, r1
     96c:	74 f5       	brge	.+92     	; 0x9ca <_Z7operatev+0x2ac>
     96e:	20 91 12 03 	lds	r18, 0x0312	; 0x800312 <rcvdata+0x4>
     972:	02 2e       	mov	r0, r18
     974:	00 0c       	add	r0, r0
     976:	33 0b       	sbc	r19, r19
     978:	a9 01       	movw	r20, r18
     97a:	42 53       	subi	r20, 0x32	; 50
     97c:	51 09       	sbc	r21, r1
     97e:	14 16       	cp	r1, r20
     980:	15 06       	cpc	r1, r21
     982:	24 f4       	brge	.+8      	; 0x98c <_Z7operatev+0x26e>
     984:	46 30       	cpi	r20, 0x06	; 6
     986:	51 05       	cpc	r21, r1
     988:	04 f5       	brge	.+64     	; 0x9ca <_Z7operatev+0x2ac>
     98a:	07 c0       	rjmp	.+14     	; 0x99a <_Z7operatev+0x27c>
     98c:	42 e3       	ldi	r20, 0x32	; 50
     98e:	50 e0       	ldi	r21, 0x00	; 0
     990:	fa 01       	movw	r30, r20
     992:	e2 1b       	sub	r30, r18
     994:	f3 0b       	sbc	r31, r19
     996:	36 97       	sbiw	r30, 0x06	; 6
     998:	c4 f4       	brge	.+48     	; 0x9ca <_Z7operatev+0x2ac>
     99a:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <rcvdata+0x6>
     99e:	02 2e       	mov	r0, r18
     9a0:	00 0c       	add	r0, r0
     9a2:	33 0b       	sbc	r19, r19
     9a4:	a9 01       	movw	r20, r18
     9a6:	42 53       	subi	r20, 0x32	; 50
     9a8:	51 09       	sbc	r21, r1
     9aa:	14 16       	cp	r1, r20
     9ac:	15 06       	cpc	r1, r21
     9ae:	24 f4       	brge	.+8      	; 0x9b8 <_Z7operatev+0x29a>
     9b0:	46 30       	cpi	r20, 0x06	; 6
     9b2:	51 05       	cpc	r21, r1
     9b4:	54 f4       	brge	.+20     	; 0x9ca <_Z7operatev+0x2ac>
     9b6:	78 c0       	rjmp	.+240    	; 0xaa8 <_Z7operatev+0x38a>
     9b8:	42 e3       	ldi	r20, 0x32	; 50
     9ba:	50 e0       	ldi	r21, 0x00	; 0
     9bc:	ba 01       	movw	r22, r20
     9be:	62 1b       	sub	r22, r18
     9c0:	73 0b       	sbc	r23, r19
     9c2:	66 30       	cpi	r22, 0x06	; 6
     9c4:	71 05       	cpc	r23, r1
     9c6:	0c f4       	brge	.+2      	; 0x9ca <_Z7operatev+0x2ac>
     9c8:	6f c0       	rjmp	.+222    	; 0xaa8 <_Z7operatev+0x38a>
	 	 {
				rampupflag_start = true;
     9ca:	21 e0       	ldi	r18, 0x01	; 1
     9cc:	20 93 b3 02 	sts	0x02B3, r18	; 0x8002b3 <rampupflag_start>
				velocity_robot[0] = (-(LEFTSTICKY-50)*timer_count/3000.0)*MAX_RPM_XY;
     9d0:	40 91 b4 02 	lds	r20, 0x02B4	; 0x8002b4 <timer_count>
     9d4:	cc e9       	ldi	r28, 0x9C	; 156
     9d6:	d2 e0       	ldi	r29, 0x02	; 2
     9d8:	22 e3       	ldi	r18, 0x32	; 50
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	28 1b       	sub	r18, r24
     9de:	39 0b       	sbc	r19, r25
     9e0:	42 03       	mulsu	r20, r18
     9e2:	b0 01       	movw	r22, r0
     9e4:	43 9f       	mul	r20, r19
     9e6:	70 0d       	add	r23, r0
     9e8:	11 24       	eor	r1, r1
     9ea:	07 2e       	mov	r0, r23
     9ec:	00 0c       	add	r0, r0
     9ee:	88 0b       	sbc	r24, r24
     9f0:	99 0b       	sbc	r25, r25
     9f2:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__floatsisf>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e8       	ldi	r19, 0x80	; 128
     9fa:	4b e3       	ldi	r20, 0x3B	; 59
     9fc:	55 e4       	ldi	r21, 0x45	; 69
     9fe:	ec d7       	rcall	.+4056   	; 0x19d8 <__divsf3>
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	48 ec       	ldi	r20, 0xC8	; 200
     a06:	53 e4       	ldi	r21, 0x43	; 67
     a08:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__mulsf3>
     a0c:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__fixsfsi>
     a10:	79 83       	std	Y+1, r23	; 0x01
     a12:	68 83       	st	Y, r22
			    velocity_robot[1] = ((LEFTSTICKX-50)*timer_count/3000.0)*MAX_RPM_XY;
     a14:	40 91 b4 02 	lds	r20, 0x02B4	; 0x8002b4 <timer_count>
     a18:	0e e0       	ldi	r16, 0x0E	; 14
     a1a:	13 e0       	ldi	r17, 0x03	; 3
     a1c:	f8 01       	movw	r30, r16
     a1e:	24 81       	ldd	r18, Z+4	; 0x04
     a20:	02 2e       	mov	r0, r18
     a22:	00 0c       	add	r0, r0
     a24:	33 0b       	sbc	r19, r19
     a26:	22 53       	subi	r18, 0x32	; 50
     a28:	31 09       	sbc	r19, r1
     a2a:	42 03       	mulsu	r20, r18
     a2c:	b0 01       	movw	r22, r0
     a2e:	43 9f       	mul	r20, r19
     a30:	70 0d       	add	r23, r0
     a32:	11 24       	eor	r1, r1
     a34:	07 2e       	mov	r0, r23
     a36:	00 0c       	add	r0, r0
     a38:	88 0b       	sbc	r24, r24
     a3a:	99 0b       	sbc	r25, r25
     a3c:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__floatsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e8       	ldi	r19, 0x80	; 128
     a44:	4b e3       	ldi	r20, 0x3B	; 59
     a46:	55 e4       	ldi	r21, 0x45	; 69
     a48:	c7 d7       	rcall	.+3982   	; 0x19d8 <__divsf3>
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	48 ec       	ldi	r20, 0xC8	; 200
     a50:	53 e4       	ldi	r21, 0x43	; 67
     a52:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__mulsf3>
     a56:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__fixsfsi>
     a5a:	7b 83       	std	Y+3, r23	; 0x03
     a5c:	6a 83       	std	Y+2, r22	; 0x02
				velocity_robot[2] = -((RIGHTSTICKX-50)*timer_count/3000.0)*MAX_RPM_YAW;  
     a5e:	40 91 b4 02 	lds	r20, 0x02B4	; 0x8002b4 <timer_count>
     a62:	f8 01       	movw	r30, r16
     a64:	26 81       	ldd	r18, Z+6	; 0x06
     a66:	02 2e       	mov	r0, r18
     a68:	00 0c       	add	r0, r0
     a6a:	33 0b       	sbc	r19, r19
     a6c:	22 53       	subi	r18, 0x32	; 50
     a6e:	31 09       	sbc	r19, r1
     a70:	42 03       	mulsu	r20, r18
     a72:	b0 01       	movw	r22, r0
     a74:	43 9f       	mul	r20, r19
     a76:	70 0d       	add	r23, r0
     a78:	11 24       	eor	r1, r1
     a7a:	07 2e       	mov	r0, r23
     a7c:	00 0c       	add	r0, r0
     a7e:	88 0b       	sbc	r24, r24
     a80:	99 0b       	sbc	r25, r25
     a82:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__floatsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e8       	ldi	r19, 0x80	; 128
     a8a:	4b e3       	ldi	r20, 0x3B	; 59
     a8c:	55 e4       	ldi	r21, 0x45	; 69
     a8e:	a4 d7       	rcall	.+3912   	; 0x19d8 <__divsf3>
     a90:	90 58       	subi	r25, 0x80	; 128
     a92:	20 e0       	ldi	r18, 0x00	; 0
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	48 ec       	ldi	r20, 0xC8	; 200
     a98:	52 e4       	ldi	r21, 0x42	; 66
     a9a:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__mulsf3>
     a9e:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__fixsfsi>
     aa2:	7d 83       	std	Y+5, r23	; 0x05
     aa4:	6c 83       	std	Y+4, r22	; 0x04
     aa6:	02 c0       	rjmp	.+4      	; 0xaac <_Z7operatev+0x38e>
	 	 }
	 	 else
	 	 rampupflag_start = false;
     aa8:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <rampupflag_start>
	 

	 
	 /*******************************************Geneva operation*********************************************/
	 
	 if (Geneva_Start && GenevaEncoder.angle >= 360 && angle_pid.Get_Error() <= 3)
     aac:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <Geneva_Start>
     ab0:	88 23       	and	r24, r24
     ab2:	09 f4       	brne	.+2      	; 0xab6 <_Z7operatev+0x398>
     ab4:	52 c0       	rjmp	.+164    	; 0xb5a <_Z7operatev+0x43c>
     ab6:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <GenevaEncoder+0x9>
     aba:	90 91 fa 02 	lds	r25, 0x02FA	; 0x8002fa <GenevaEncoder+0xa>
     abe:	a0 91 fb 02 	lds	r26, 0x02FB	; 0x8002fb <GenevaEncoder+0xb>
     ac2:	b0 91 fc 02 	lds	r27, 0x02FC	; 0x8002fc <GenevaEncoder+0xc>
     ac6:	88 36       	cpi	r24, 0x68	; 104
     ac8:	91 40       	sbci	r25, 0x01	; 1
     aca:	a1 05       	cpc	r26, r1
     acc:	b1 05       	cpc	r27, r1
     ace:	b4 f1       	brlt	.+108    	; 0xb3c <_Z7operatev+0x41e>
     ad0:	60 91 da 02 	lds	r22, 0x02DA	; 0x8002da <angle_pid+0xe>
     ad4:	70 91 db 02 	lds	r23, 0x02DB	; 0x8002db <angle_pid+0xf>
     ad8:	77 23       	and	r23, r23
     ada:	1c f4       	brge	.+6      	; 0xae2 <_Z7operatev+0x3c4>
     adc:	71 95       	neg	r23
     ade:	61 95       	neg	r22
     ae0:	71 09       	sbc	r23, r1
     ae2:	07 2e       	mov	r0, r23
     ae4:	00 0c       	add	r0, r0
     ae6:	88 0b       	sbc	r24, r24
     ae8:	99 0b       	sbc	r25, r25
     aea:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__floatsisf>
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	40 e4       	ldi	r20, 0x40	; 64
     af4:	50 e4       	ldi	r21, 0x40	; 64
     af6:	6c d7       	rcall	.+3800   	; 0x19d0 <__cmpsf2>
     af8:	18 16       	cp	r1, r24
     afa:	04 f1       	brlt	.+64     	; 0xb3c <_Z7operatev+0x41e>
	 {
		 if(rack_throw_auto)
     afc:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <rack_throw_auto>
     b00:	88 23       	and	r24, r24
     b02:	39 f0       	breq	.+14     	; 0xb12 <_Z7operatev+0x3f4>
		 {
			 SHUTTCOCK_PASS_CLOSE();
     b04:	8d 98       	cbi	0x11, 5	; 17
			 SHUTTCOCK_GRIP_CLOSE();
     b06:	8c 98       	cbi	0x11, 4	; 17
			 inside_robot = true;
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <inside_robot>
			 rack_throw_auto = false;
     b0e:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <rack_throw_auto>
		 }
		 GenevaEncoder.angle = 0;
     b12:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <GenevaEncoder+0x9>
     b16:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <GenevaEncoder+0xa>
     b1a:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <GenevaEncoder+0xb>
     b1e:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <GenevaEncoder+0xc>
     b22:	ec ec       	ldi	r30, 0xCC	; 204
     b24:	f2 e0       	ldi	r31, 0x02	; 2
     b26:	15 86       	std	Z+13, r1	; 0x0d
     b28:	14 86       	std	Z+12, r1	; 0x0c
		inline float Get_I(){return ki;};
		inline float Get_D(){return kd;};
			
		inline float Get_Error(){return abs(error);};
		inline void  reset_error(){error = 0;};
		inline void  reset_iterm(){errorsum = 0;};
     b2a:	13 8a       	std	Z+19, r1	; 0x13
     b2c:	12 8a       	std	Z+18, r1	; 0x12
		inline void  reset_output(){cv = 0;};
     b2e:	14 8a       	std	Z+20, r1	; 0x14
     b30:	15 8a       	std	Z+21, r1	; 0x15
     b32:	16 8a       	std	Z+22, r1	; 0x16
     b34:	17 8a       	std	Z+23, r1	; 0x17
		 angle_pid.Set_SP(0);
		 angle_pid.reset_iterm();
		 angle_pid.reset_output();
		 Geneva_Start = false;
     b36:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <Geneva_Start>
     b3a:	0f c0       	rjmp	.+30     	; 0xb5a <_Z7operatev+0x43c>
	 }
	 
	 if (Geneva_Start && GenevaEncoder.angle >= 100)
     b3c:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <GenevaEncoder+0x9>
     b40:	90 91 fa 02 	lds	r25, 0x02FA	; 0x8002fa <GenevaEncoder+0xa>
     b44:	a0 91 fb 02 	lds	r26, 0x02FB	; 0x8002fb <GenevaEncoder+0xb>
     b48:	b0 91 fc 02 	lds	r27, 0x02FC	; 0x8002fc <GenevaEncoder+0xc>
     b4c:	84 36       	cpi	r24, 0x64	; 100
     b4e:	91 05       	cpc	r25, r1
     b50:	a1 05       	cpc	r26, r1
     b52:	b1 05       	cpc	r27, r1
     b54:	14 f0       	brlt	.+4      	; 0xb5a <_Z7operatev+0x43c>
	 {
		 //stop geneva
		 pneumatic_geneva_start = false;
     b56:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <pneumatic_geneva_start>
	 }
	 
	 if (angle_pid_compute)
     b5a:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <angle_pid_compute>
     b5e:	88 23       	and	r24, r24
	 {
		 GenevaMotor.SetOcrValue(angle_pid.angle_Compute(GenevaEncoder.angle));
     b60:	69 f0       	breq	.+26     	; 0xb7c <_Z7operatev+0x45e>
     b62:	60 91 f9 02 	lds	r22, 0x02F9	; 0x8002f9 <GenevaEncoder+0x9>
     b66:	70 91 fa 02 	lds	r23, 0x02FA	; 0x8002fa <GenevaEncoder+0xa>
     b6a:	8c ec       	ldi	r24, 0xCC	; 204
     b6c:	92 e0       	ldi	r25, 0x02	; 2
     b6e:	fb d2       	rcall	.+1526   	; 0x1166 <_ZN3PID13angle_ComputeEi>
     b70:	9b d7       	rcall	.+3894   	; 0x1aa8 <__fixsfsi>
     b72:	8a e0       	ldi	r24, 0x0A	; 10
     b74:	93 e0       	ldi	r25, 0x03	; 3
     b76:	05 d6       	rcall	.+3082   	; 0x1782 <_ZN10Rack_Motor11SetOcrValueEi>
		 angle_pid_compute = false;
     b78:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <angle_pid_compute>
	 }
	 
	 /*************************************************Delay operation*****************************************/
	 
	 if (rack_throw_auto && Rack_home_position && (millis()-previous_time)>700)
     b7c:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <rack_throw_auto>
     b80:	88 23       	and	r24, r24
     b82:	01 f1       	breq	.+64     	; 0xbc4 <_Z7operatev+0x4a6>
     b84:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <Rack_home_position>
     b88:	88 23       	and	r24, r24
     b8a:	e1 f0       	breq	.+56     	; 0xbc4 <_Z7operatev+0x4a6>
     b8c:	72 d3       	rcall	.+1764   	; 0x1272 <_Z6millisv>
     b8e:	00 91 ec 02 	lds	r16, 0x02EC	; 0x8002ec <previous_time>
     b92:	10 91 ed 02 	lds	r17, 0x02ED	; 0x8002ed <previous_time+0x1>
     b96:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <previous_time+0x2>
     b9a:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <previous_time+0x3>
     b9e:	dc 01       	movw	r26, r24
     ba0:	cb 01       	movw	r24, r22
     ba2:	80 1b       	sub	r24, r16
     ba4:	91 0b       	sbc	r25, r17
     ba6:	a2 0b       	sbc	r26, r18
     ba8:	b3 0b       	sbc	r27, r19
     baa:	8d 3b       	cpi	r24, 0xBD	; 189
     bac:	92 40       	sbci	r25, 0x02	; 2
     bae:	a1 05       	cpc	r26, r1
     bb0:	b1 05       	cpc	r27, r1
	 {
		 RackMotor.SetOcrValue(-RACK_SPEED_MOTOR);
     bb2:	40 f0       	brcs	.+16     	; 0xbc4 <_Z7operatev+0x4a6>
     bb4:	67 e0       	ldi	r22, 0x07	; 7
     bb6:	7f ef       	ldi	r23, 0xFF	; 255
     bb8:	8b e0       	ldi	r24, 0x0B	; 11
     bba:	93 e0       	ldi	r25, 0x03	; 3
		 Buttonx_pressed = true;
     bbc:	e2 d5       	rcall	.+3012   	; 0x1782 <_ZN10Rack_Motor11SetOcrValueEi>
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <Buttonx_pressed>
	 }
	 
	 
	 if(pneumatic_geneva_start && (millis()-pneumatic_geneva_time) > 700)
     bc4:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <pneumatic_geneva_start>
     bc8:	88 23       	and	r24, r24
     bca:	e9 f0       	breq	.+58     	; 0xc06 <_Z7operatev+0x4e8>
     bcc:	52 d3       	rcall	.+1700   	; 0x1272 <_Z6millisv>
     bce:	00 91 e8 02 	lds	r16, 0x02E8	; 0x8002e8 <pneumatic_geneva_time>
     bd2:	10 91 e9 02 	lds	r17, 0x02E9	; 0x8002e9 <pneumatic_geneva_time+0x1>
     bd6:	20 91 ea 02 	lds	r18, 0x02EA	; 0x8002ea <pneumatic_geneva_time+0x2>
     bda:	30 91 eb 02 	lds	r19, 0x02EB	; 0x8002eb <pneumatic_geneva_time+0x3>
     bde:	dc 01       	movw	r26, r24
     be0:	cb 01       	movw	r24, r22
     be2:	80 1b       	sub	r24, r16
     be4:	91 0b       	sbc	r25, r17
     be6:	a2 0b       	sbc	r26, r18
     be8:	b3 0b       	sbc	r27, r19
     bea:	8d 3b       	cpi	r24, 0xBD	; 189
     bec:	92 40       	sbci	r25, 0x02	; 2
     bee:	a1 05       	cpc	r26, r1
     bf0:	b1 05       	cpc	r27, r1
     bf2:	48 f0       	brcs	.+18     	; 0xc06 <_Z7operatev+0x4e8>
	public:
		PID():kp(0),ki(0),kd(0),sp(0),error(0),lastinput(0),errorsum(0){};
		inline void Set_P(float kP){kp = kP;};
		inline void Set_I(float kI){ki = kI;};
		inline void Set_D(float kD){kd = kD;};	
		inline void Set_SP(int sP){sp=sP;};
     bf4:	88 e6       	ldi	r24, 0x68	; 104
     bf6:	91 e0       	ldi	r25, 0x01	; 1
     bf8:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <angle_pid+0xd>
     bfc:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <angle_pid+0xc>
	 {
		 angle_pid.Set_SP(360);
		 Geneva_Start = true;
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <Geneva_Start>
	 }
	 
	 if (pass_the_shuttcock && (millis()-passing_time) > 300)
     c06:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <pass_the_shuttcock>
     c0a:	88 23       	and	r24, r24
     c0c:	d1 f0       	breq	.+52     	; 0xc42 <_Z7operatev+0x524>
     c0e:	31 d3       	rcall	.+1634   	; 0x1272 <_Z6millisv>
     c10:	00 91 e4 02 	lds	r16, 0x02E4	; 0x8002e4 <passing_time>
     c14:	10 91 e5 02 	lds	r17, 0x02E5	; 0x8002e5 <passing_time+0x1>
     c18:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <passing_time+0x2>
     c1c:	30 91 e7 02 	lds	r19, 0x02E7	; 0x8002e7 <passing_time+0x3>
     c20:	dc 01       	movw	r26, r24
     c22:	cb 01       	movw	r24, r22
     c24:	80 1b       	sub	r24, r16
     c26:	91 0b       	sbc	r25, r17
     c28:	a2 0b       	sbc	r26, r18
     c2a:	b3 0b       	sbc	r27, r19
     c2c:	8d 32       	cpi	r24, 0x2D	; 45
     c2e:	91 40       	sbci	r25, 0x01	; 1
     c30:	a1 05       	cpc	r26, r1
     c32:	b1 05       	cpc	r27, r1
	 {
		 SHUTTCOCK_PASS_TOGGLE();
     c34:	30 f0       	brcs	.+12     	; 0xc42 <_Z7operatev+0x524>
     c36:	91 b3       	in	r25, 0x11	; 17
     c38:	80 e2       	ldi	r24, 0x20	; 32
     c3a:	89 27       	eor	r24, r25
		 pass_the_shuttcock = false;
     c3c:	81 bb       	out	0x11, r24	; 17
     c3e:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <pass_the_shuttcock>
	 }
	 
	 if(throw_rack && (millis()-previous_time) >= 700)
     c42:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <throw_rack>
     c46:	88 23       	and	r24, r24
     c48:	b1 f1       	breq	.+108    	; 0xcb6 <_Z7operatev+0x598>
     c4a:	13 d3       	rcall	.+1574   	; 0x1272 <_Z6millisv>
     c4c:	00 91 ec 02 	lds	r16, 0x02EC	; 0x8002ec <previous_time>
     c50:	10 91 ed 02 	lds	r17, 0x02ED	; 0x8002ed <previous_time+0x1>
     c54:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <previous_time+0x2>
     c58:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <previous_time+0x3>
     c5c:	dc 01       	movw	r26, r24
     c5e:	cb 01       	movw	r24, r22
     c60:	80 1b       	sub	r24, r16
     c62:	91 0b       	sbc	r25, r17
     c64:	a2 0b       	sbc	r26, r18
     c66:	b3 0b       	sbc	r27, r19
     c68:	8c 3b       	cpi	r24, 0xBC	; 188
     c6a:	92 40       	sbci	r25, 0x02	; 2
     c6c:	a1 05       	cpc	r26, r1
     c6e:	b1 05       	cpc	r27, r1
	 {
		 RACK_GRIP_OPEN();
     c70:	10 f1       	brcs	.+68     	; 0xcb6 <_Z7operatev+0x598>
		 throw_rack = false;
     c72:	88 98       	cbi	0x11, 0	; 17
     c74:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <throw_rack>
	 /**************************************************Rack Operation******************************************************/
	 if (!Buttonx_pressed)
	 {
		 if (LEFTTRIGGER > 20 && READ(LIMIT_SWITCH_PIN))
		 {
			 RackMotor.SetOcrValue(RACK_SPEED_MOTOR);
     c78:	1e c0       	rjmp	.+60     	; 0xcb6 <_Z7operatev+0x598>
     c7a:	69 ef       	ldi	r22, 0xF9	; 249
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	8b e0       	ldi	r24, 0x0B	; 11
     c80:	93 e0       	ldi	r25, 0x03	; 3
     c82:	7f d5       	rcall	.+2814   	; 0x1782 <_ZN10Rack_Motor11SetOcrValueEi>
		 }
		 else if (RIGHTTRIGGER > 20 )
     c84:	31 ce       	rjmp	.-926    	; 0x8e8 <_Z7operatev+0x1ca>
     c86:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <rcvdata+0x2>
     c8a:	85 31       	cpi	r24, 0x15	; 21
     c8c:	0c f0       	brlt	.+2      	; 0xc90 <_Z7operatev+0x572>
     c8e:	23 ce       	rjmp	.-954    	; 0x8d6 <_Z7operatev+0x1b8>
	 }
	 

	 if (RackEncoder.Get_count() <= RACK_POSITION_COUNT && Rack_home_position) // if reached at mid-where somewhere
	 {
		 Rack_home_position = false;
     c90:	28 ce       	rjmp	.-944    	; 0x8e2 <_Z7operatev+0x1c4>
     c92:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <Rack_home_position>
		 donotstop = true;
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <donotstop>
	 }
	 
	 if(RackEncoder.Get_count() <= RACK_COUNT && Buttonx_pressed && donotstop  )		//reached final position
	 {
		 RackMotor.StopMotor();
     c9c:	34 ce       	rjmp	.-920    	; 0x906 <_Z7operatev+0x1e8>
     c9e:	8b e0       	ldi	r24, 0x0B	; 11
     ca0:	93 e0       	ldi	r25, 0x03	; 3
     ca2:	52 d5       	rcall	.+2724   	; 0x1748 <_ZN10Rack_Motor9StopMotorEv>
		 Buttonx_pressed = false;
     ca4:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <Buttonx_pressed>
		 donotstop = false;
     ca8:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <donotstop>
		 if (rack_throw_auto)
     cac:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <rack_throw_auto>
     cb0:	81 11       	cpse	r24, r1
     cb2:	3d ce       	rjmp	.-902    	; 0x92e <_Z7operatev+0x210>
     cb4:	46 ce       	rjmp	.-884    	; 0x942 <_Z7operatev+0x224>
	 }
	 
	 //if (robot_rpm>MAX_RPM) robot_rpm = MAX_RPM;
	 //else if (robot_rpm<20)	robot_rpm = 20;

 }
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	08 95       	ret

00000cc0 <main>:
#include "RobotDriver.h"


int main(void)
{    	
	initUART0();
     cc0:	99 d5       	rcall	.+2866   	; 0x17f4 <_Z9initUART0v>
	initUART2();
     cc2:	a4 d5       	rcall	.+2888   	; 0x180c <_Z9initUART2v>
	drive_init();
     cc4:	51 da       	rcall	.-2910   	; 0x168 <_Z10drive_initv>
	rack_init();
     cc6:	e1 d2       	rcall	.+1474   	; 0x128a <_Z9rack_initv>
	sei();
	while(1)
	{
		operate();
     cc8:	78 94       	sei
		rack_limit_check();
     cca:	29 dd       	rcall	.-1454   	; 0x71e <_Z7operatev>
     ccc:	6b d3       	rcall	.+1750   	; 0x13a4 <_Z16rack_limit_checkv>
		calculate_wheel_velocity();
     cce:	c1 da       	rcall	.-2686   	; 0x252 <_Z24calculate_wheel_velocityv>
     cd0:	4f db       	rcall	.-2402   	; 0x370 <_Z21update_wheel_velocityv>
		update_wheel_velocity();
     cd2:	68 d3       	rcall	.+1744   	; 0x13a4 <_Z16rack_limit_checkv>
     cd4:	fa cf       	rjmp	.-12     	; 0xcca <main+0xa>

00000cd6 <__vector_42>:
		rack_limit_check();
     cd6:	1f 92       	push	r1
     cd8:	0f 92       	push	r0
     cda:	0f b6       	in	r0, 0x3f	; 63
 
 
 /*********************************************************PID computation timer*****************************************************/

 ISR(TIMER4_COMPA_vect)
 {
     cdc:	0f 92       	push	r0
     cde:	11 24       	eor	r1, r1
     ce0:	0b b6       	in	r0, 0x3b	; 59
     ce2:	0f 92       	push	r0
     ce4:	8f 93       	push	r24
     ce6:	9f 93       	push	r25
     ce8:	af 93       	push	r26
     cea:	bf 93       	push	r27
     cec:	ef 93       	push	r30
     cee:	ff 93       	push	r31
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
	inline void dcrCount(){pprcount--;};
	inline int Get_count(){return pprcount;};
	inline void Set_count(int val){pprcount = val;};
	inline void Calc_Speed(){speed = pprcount;pprcount = 0;};	//keep in timer compare match
     cf0:	ec e6       	ldi	r30, 0x6C	; 108
     cf2:	f2 e0       	ldi	r31, 0x02	; 2
     cf4:	85 81       	ldd	r24, Z+5	; 0x05
     cf6:	96 81       	ldd	r25, Z+6	; 0x06
     cf8:	a7 81       	ldd	r26, Z+7	; 0x07
     cfa:	b0 85       	ldd	r27, Z+8	; 0x08
     cfc:	81 83       	std	Z+1, r24	; 0x01
     cfe:	92 83       	std	Z+2, r25	; 0x02
     d00:	a3 83       	std	Z+3, r26	; 0x03
     d02:	b4 83       	std	Z+4, r27	; 0x04
     d04:	15 82       	std	Z+5, r1	; 0x05
     d06:	16 82       	std	Z+6, r1	; 0x06
     d08:	17 82       	std	Z+7, r1	; 0x07
     d0a:	10 86       	std	Z+8, r1	; 0x08
     d0c:	86 85       	ldd	r24, Z+14	; 0x0e
     d0e:	97 85       	ldd	r25, Z+15	; 0x0f
     d10:	a0 89       	ldd	r26, Z+16	; 0x10
     d12:	b1 89       	ldd	r27, Z+17	; 0x11
     d14:	82 87       	std	Z+10, r24	; 0x0a
     d16:	93 87       	std	Z+11, r25	; 0x0b
     d18:	a4 87       	std	Z+12, r26	; 0x0c
     d1a:	b5 87       	std	Z+13, r27	; 0x0d
     d1c:	16 86       	std	Z+14, r1	; 0x0e
     d1e:	17 86       	std	Z+15, r1	; 0x0f
     d20:	10 8a       	std	Z+16, r1	; 0x10
     d22:	11 8a       	std	Z+17, r1	; 0x11
     d24:	87 89       	ldd	r24, Z+23	; 0x17
     d26:	90 8d       	ldd	r25, Z+24	; 0x18
     d28:	a1 8d       	ldd	r26, Z+25	; 0x19
     d2a:	b2 8d       	ldd	r27, Z+26	; 0x1a
     d2c:	83 8b       	std	Z+19, r24	; 0x13
     d2e:	94 8b       	std	Z+20, r25	; 0x14
     d30:	a5 8b       	std	Z+21, r26	; 0x15
     d32:	b6 8b       	std	Z+22, r27	; 0x16
     d34:	17 8a       	std	Z+23, r1	; 0x17
     d36:	10 8e       	std	Z+24, r1	; 0x18
     d38:	11 8e       	std	Z+25, r1	; 0x19
     d3a:	12 8e       	std	Z+26, r1	; 0x1a
     d3c:	80 a1       	ldd	r24, Z+32	; 0x20
     d3e:	91 a1       	ldd	r25, Z+33	; 0x21
     d40:	a2 a1       	ldd	r26, Z+34	; 0x22
     d42:	b3 a1       	ldd	r27, Z+35	; 0x23
     d44:	84 8f       	std	Z+28, r24	; 0x1c
     d46:	95 8f       	std	Z+29, r25	; 0x1d
     d48:	a6 8f       	std	Z+30, r26	; 0x1e
     d4a:	b7 8f       	std	Z+31, r27	; 0x1f
     d4c:	10 a2       	std	Z+32, r1	; 0x20
     d4e:	11 a2       	std	Z+33, r1	; 0x21
     d50:	12 a2       	std	Z+34, r1	; 0x22
     d52:	13 a2       	std	Z+35, r1	; 0x23
	 e[0].Calc_Speed();
	 e[1].Calc_Speed();
	 e[2].Calc_Speed();
	 e[3].Calc_Speed();
	 pidflag = true;
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <pidflag>
	 angle_pid_compute = true;
     d5a:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <angle_pid_compute>
 }
     d5e:	ff 91       	pop	r31
     d60:	ef 91       	pop	r30
     d62:	bf 91       	pop	r27
     d64:	af 91       	pop	r26
     d66:	9f 91       	pop	r25
     d68:	8f 91       	pop	r24
     d6a:	0f 90       	pop	r0
     d6c:	0b be       	out	0x3b, r0	; 59
     d6e:	0f 90       	pop	r0
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	0f 90       	pop	r0
     d74:	1f 90       	pop	r1
     d76:	18 95       	reti

00000d78 <_ZN5Motor7InitPWMEv>:

}

void Motor::InitPWM()
{
	if (num==1)
     d78:	fc 01       	movw	r30, r24
     d7a:	80 81       	ld	r24, Z
     d7c:	81 30       	cpi	r24, 0x01	; 1
     d7e:	f1 f4       	brne	.+60     	; 0xdbc <_ZN5Motor7InitPWMEv+0x44>
	{
		OUTPUT(DD_F1);
     d80:	e7 e0       	ldi	r30, 0x07	; 7
     d82:	f1 e0       	ldi	r31, 0x01	; 1
     d84:	80 81       	ld	r24, Z
     d86:	81 60       	ori	r24, 0x01	; 1
     d88:	80 83       	st	Z, r24
		OUTPUT(DD_B1);
     d8a:	80 81       	ld	r24, Z
     d8c:	82 60       	ori	r24, 0x02	; 2
     d8e:	80 83       	st	Z, r24

		OUTPUT(DD_PWM1);
     d90:	ea e0       	ldi	r30, 0x0A	; 10
     d92:	f1 e0       	ldi	r31, 0x01	; 1
     d94:	80 81       	ld	r24, Z
     d96:	88 60       	ori	r24, 0x08	; 8
     d98:	80 83       	st	Z, r24

		PWM_TCCRA1	|=  ( 1 << PWM_1COM1 ) | ( 1 << PWM_1WGM1 );														//
     d9a:	e0 e2       	ldi	r30, 0x20	; 32
     d9c:	f1 e0       	ldi	r31, 0x01	; 1
     d9e:	80 81       	ld	r24, Z
     da0:	82 68       	ori	r24, 0x82	; 130
     da2:	80 83       	st	Z, r24
		PWM_TCCRB1	|=  ( 1 << PWM_1WGM2 ) | ( 1 << PWM_1WGM3 ) | ( 1 << PWM_1CS1);									//PRESCALAR 8
     da4:	e1 e2       	ldi	r30, 0x21	; 33
     da6:	f1 e0       	ldi	r31, 0x01	; 1
     da8:	80 81       	ld	r24, Z
     daa:	8a 61       	ori	r24, 0x1A	; 26
     dac:	80 83       	st	Z, r24
		PWM_ICR1		 =         ICR_TOP;
     dae:	89 ef       	ldi	r24, 0xF9	; 249
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     db6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     dba:	08 95       	ret
	}
	else if(num==2)
     dbc:	82 30       	cpi	r24, 0x02	; 2
     dbe:	f1 f4       	brne	.+60     	; 0xdfc <_ZN5Motor7InitPWMEv+0x84>
	{
		OUTPUT(DD_F2);
     dc0:	e7 e0       	ldi	r30, 0x07	; 7
     dc2:	f1 e0       	ldi	r31, 0x01	; 1
     dc4:	80 81       	ld	r24, Z
     dc6:	84 60       	ori	r24, 0x04	; 4
     dc8:	80 83       	st	Z, r24
		OUTPUT(DD_B2);
     dca:	80 81       	ld	r24, Z
     dcc:	88 60       	ori	r24, 0x08	; 8
     dce:	80 83       	st	Z, r24

		OUTPUT(DD_PWM2);
     dd0:	ea e0       	ldi	r30, 0x0A	; 10
     dd2:	f1 e0       	ldi	r31, 0x01	; 1
     dd4:	80 81       	ld	r24, Z
     dd6:	80 61       	ori	r24, 0x10	; 16
     dd8:	80 83       	st	Z, r24

		PWM_TCCRA2	|=  ( 1 << PWM_2COM1 ) | ( 1 << PWM_2WGM1 );														//
     dda:	e0 e2       	ldi	r30, 0x20	; 32
     ddc:	f1 e0       	ldi	r31, 0x01	; 1
     dde:	80 81       	ld	r24, Z
     de0:	82 62       	ori	r24, 0x22	; 34
     de2:	80 83       	st	Z, r24
		PWM_TCCRB2	|=  ( 1 << PWM_2WGM2 ) | ( 1 << PWM_2WGM3 ) | ( 1 << PWM_2CS1);									//PRESCALAR 8
     de4:	e1 e2       	ldi	r30, 0x21	; 33
     de6:	f1 e0       	ldi	r31, 0x01	; 1
     de8:	80 81       	ld	r24, Z
     dea:	8a 61       	ori	r24, 0x1A	; 26
     dec:	80 83       	st	Z, r24
		PWM_ICR2		 =         ICR_TOP;
     dee:	89 ef       	ldi	r24, 0xF9	; 249
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     df6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     dfa:	08 95       	ret
	}
	else if(num==3)
     dfc:	83 30       	cpi	r24, 0x03	; 3
     dfe:	f1 f4       	brne	.+60     	; 0xe3c <_ZN5Motor7InitPWMEv+0xc4>
	{
		OUTPUT(DD_F3);
     e00:	e7 e0       	ldi	r30, 0x07	; 7
     e02:	f1 e0       	ldi	r31, 0x01	; 1
     e04:	80 81       	ld	r24, Z
     e06:	80 62       	ori	r24, 0x20	; 32
     e08:	80 83       	st	Z, r24
		OUTPUT(DD_B3);
     e0a:	80 81       	ld	r24, Z
     e0c:	80 61       	ori	r24, 0x10	; 16
     e0e:	80 83       	st	Z, r24

		OUTPUT(DD_PWM3);
     e10:	ea e0       	ldi	r30, 0x0A	; 10
     e12:	f1 e0       	ldi	r31, 0x01	; 1
     e14:	80 81       	ld	r24, Z
     e16:	80 62       	ori	r24, 0x20	; 32
     e18:	80 83       	st	Z, r24

		PWM_TCCRA3	|=  ( 1 << PWM_3COM1 ) | ( 1 << PWM_3WGM1 );														//
     e1a:	e0 e2       	ldi	r30, 0x20	; 32
     e1c:	f1 e0       	ldi	r31, 0x01	; 1
     e1e:	80 81       	ld	r24, Z
     e20:	8a 60       	ori	r24, 0x0A	; 10
     e22:	80 83       	st	Z, r24
		PWM_TCCRB3	|=  ( 1 << PWM_3WGM2 ) | ( 1 << PWM_3WGM3 ) | ( 1 << PWM_3CS1);									//PRESCALAR 8
     e24:	e1 e2       	ldi	r30, 0x21	; 33
     e26:	f1 e0       	ldi	r31, 0x01	; 1
     e28:	80 81       	ld	r24, Z
     e2a:	8a 61       	ori	r24, 0x1A	; 26
     e2c:	80 83       	st	Z, r24
		PWM_ICR3		 =         ICR_TOP;
     e2e:	89 ef       	ldi	r24, 0xF9	; 249
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     e36:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     e3a:	08 95       	ret
	} 
	else if(num==4)
     e3c:	84 30       	cpi	r24, 0x04	; 4
     e3e:	c9 f4       	brne	.+50     	; 0xe72 <_ZN5Motor7InitPWMEv+0xfa>
	{
		OUTPUT(DD_F4);
     e40:	e7 e0       	ldi	r30, 0x07	; 7
     e42:	f1 e0       	ldi	r31, 0x01	; 1
     e44:	80 81       	ld	r24, Z
     e46:	80 68       	ori	r24, 0x80	; 128
     e48:	80 83       	st	Z, r24
		OUTPUT(DD_B4);
     e4a:	80 81       	ld	r24, Z
     e4c:	80 64       	ori	r24, 0x40	; 64
     e4e:	80 83       	st	Z, r24

		OUTPUT(DD_PWM4);
     e50:	6b 9a       	sbi	0x0d, 3	; 13

		PWM_TCCRA4	|=  ( 1 << PWM_4COM1 ) | ( 1 << PWM_4WGM1 );														//
     e52:	e0 e9       	ldi	r30, 0x90	; 144
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	82 68       	ori	r24, 0x82	; 130
     e5a:	80 83       	st	Z, r24
		PWM_TCCRB4	|=  ( 1 << PWM_4WGM2 ) | ( 1 << PWM_4WGM3 ) | ( 1 << PWM_4CS1);									//PRESCALAR 8
     e5c:	e1 e9       	ldi	r30, 0x91	; 145
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	8a 61       	ori	r24, 0x1A	; 26
     e64:	80 83       	st	Z, r24
		PWM_ICR4	 =         ICR_TOP;
     e66:	89 ef       	ldi	r24, 0xF9	; 249
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
     e6e:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
     e72:	08 95       	ret

00000e74 <_ZN5Motor19SetForwardDirectionEv>:
	
}

void Motor::SetForwardDirection()
{
	switch(num)
     e74:	fc 01       	movw	r30, r24
     e76:	80 81       	ld	r24, Z
     e78:	82 30       	cpi	r24, 0x02	; 2
     e7a:	91 f0       	breq	.+36     	; 0xea0 <_ZN5Motor19SetForwardDirectionEv+0x2c>
     e7c:	18 f4       	brcc	.+6      	; 0xe84 <_ZN5Motor19SetForwardDirectionEv+0x10>
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	31 f0       	breq	.+12     	; 0xe8e <_ZN5Motor19SetForwardDirectionEv+0x1a>
     e82:	08 95       	ret
     e84:	83 30       	cpi	r24, 0x03	; 3
     e86:	a9 f0       	breq	.+42     	; 0xeb2 <_ZN5Motor19SetForwardDirectionEv+0x3e>
     e88:	84 30       	cpi	r24, 0x04	; 4
     e8a:	e1 f0       	breq	.+56     	; 0xec4 <_ZN5Motor19SetForwardDirectionEv+0x50>
     e8c:	08 95       	ret
	{
		case 1:
			SET		(DD_F1);
     e8e:	e8 e0       	ldi	r30, 0x08	; 8
     e90:	f1 e0       	ldi	r31, 0x01	; 1
     e92:	80 81       	ld	r24, Z
     e94:	81 60       	ori	r24, 0x01	; 1
     e96:	80 83       	st	Z, r24
			CLEAR	(DD_B1);
     e98:	80 81       	ld	r24, Z
     e9a:	8d 7f       	andi	r24, 0xFD	; 253
     e9c:	80 83       	st	Z, r24
			break;
     e9e:	08 95       	ret
		case 2:
			SET		(DD_F2);
     ea0:	e8 e0       	ldi	r30, 0x08	; 8
     ea2:	f1 e0       	ldi	r31, 0x01	; 1
     ea4:	80 81       	ld	r24, Z
     ea6:	84 60       	ori	r24, 0x04	; 4
     ea8:	80 83       	st	Z, r24
			CLEAR	(DD_B2);
     eaa:	80 81       	ld	r24, Z
     eac:	87 7f       	andi	r24, 0xF7	; 247
     eae:	80 83       	st	Z, r24
			break;
     eb0:	08 95       	ret
		case 3:
			SET		(DD_F3);
     eb2:	e8 e0       	ldi	r30, 0x08	; 8
     eb4:	f1 e0       	ldi	r31, 0x01	; 1
     eb6:	80 81       	ld	r24, Z
     eb8:	80 62       	ori	r24, 0x20	; 32
     eba:	80 83       	st	Z, r24
			CLEAR	(DD_B3);
     ebc:	80 81       	ld	r24, Z
     ebe:	8f 7e       	andi	r24, 0xEF	; 239
     ec0:	80 83       	st	Z, r24
			break;
     ec2:	08 95       	ret
		case 4:
			SET		(DD_F4);
     ec4:	e8 e0       	ldi	r30, 0x08	; 8
     ec6:	f1 e0       	ldi	r31, 0x01	; 1
     ec8:	80 81       	ld	r24, Z
     eca:	80 68       	ori	r24, 0x80	; 128
     ecc:	80 83       	st	Z, r24
			CLEAR	(DD_B4);
     ece:	80 81       	ld	r24, Z
     ed0:	8f 7b       	andi	r24, 0xBF	; 191
     ed2:	80 83       	st	Z, r24
     ed4:	08 95       	ret

00000ed6 <_ZN5Motor19SetReverseDirectionEv>:
	

}
void Motor::SetReverseDirection()
{
	switch(num)
     ed6:	fc 01       	movw	r30, r24
     ed8:	80 81       	ld	r24, Z
     eda:	82 30       	cpi	r24, 0x02	; 2
     edc:	91 f0       	breq	.+36     	; 0xf02 <_ZN5Motor19SetReverseDirectionEv+0x2c>
     ede:	18 f4       	brcc	.+6      	; 0xee6 <_ZN5Motor19SetReverseDirectionEv+0x10>
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	31 f0       	breq	.+12     	; 0xef0 <_ZN5Motor19SetReverseDirectionEv+0x1a>
     ee4:	08 95       	ret
     ee6:	83 30       	cpi	r24, 0x03	; 3
     ee8:	a9 f0       	breq	.+42     	; 0xf14 <_ZN5Motor19SetReverseDirectionEv+0x3e>
     eea:	84 30       	cpi	r24, 0x04	; 4
     eec:	e1 f0       	breq	.+56     	; 0xf26 <_ZN5Motor19SetReverseDirectionEv+0x50>
     eee:	08 95       	ret
	{
		case 1:
			CLEAR	(DD_F1);
     ef0:	e8 e0       	ldi	r30, 0x08	; 8
     ef2:	f1 e0       	ldi	r31, 0x01	; 1
     ef4:	80 81       	ld	r24, Z
     ef6:	8e 7f       	andi	r24, 0xFE	; 254
     ef8:	80 83       	st	Z, r24
			SET		(DD_B1);
     efa:	80 81       	ld	r24, Z
     efc:	82 60       	ori	r24, 0x02	; 2
     efe:	80 83       	st	Z, r24
			break;
     f00:	08 95       	ret
		case 2:
			CLEAR	(DD_F2);
     f02:	e8 e0       	ldi	r30, 0x08	; 8
     f04:	f1 e0       	ldi	r31, 0x01	; 1
     f06:	80 81       	ld	r24, Z
     f08:	8b 7f       	andi	r24, 0xFB	; 251
     f0a:	80 83       	st	Z, r24
			SET		(DD_B2);
     f0c:	80 81       	ld	r24, Z
     f0e:	88 60       	ori	r24, 0x08	; 8
     f10:	80 83       	st	Z, r24
			break;
     f12:	08 95       	ret
		case 3:
			CLEAR	(DD_F3);
     f14:	e8 e0       	ldi	r30, 0x08	; 8
     f16:	f1 e0       	ldi	r31, 0x01	; 1
     f18:	80 81       	ld	r24, Z
     f1a:	8f 7d       	andi	r24, 0xDF	; 223
     f1c:	80 83       	st	Z, r24
			SET		(DD_B3);
     f1e:	80 81       	ld	r24, Z
     f20:	80 61       	ori	r24, 0x10	; 16
     f22:	80 83       	st	Z, r24
			break;
     f24:	08 95       	ret
		case 4:
			CLEAR	(DD_F4);
     f26:	e8 e0       	ldi	r30, 0x08	; 8
     f28:	f1 e0       	ldi	r31, 0x01	; 1
     f2a:	80 81       	ld	r24, Z
     f2c:	8f 77       	andi	r24, 0x7F	; 127
     f2e:	80 83       	st	Z, r24
			SET		(DD_B4);
     f30:	80 81       	ld	r24, Z
     f32:	80 64       	ori	r24, 0x40	; 64
     f34:	80 83       	st	Z, r24
     f36:	08 95       	ret

00000f38 <_ZN5Motor9StopMotorEv>:

}

void Motor::StopMotor()
{
	switch(num)
     f38:	fc 01       	movw	r30, r24
     f3a:	80 81       	ld	r24, Z
     f3c:	82 30       	cpi	r24, 0x02	; 2
     f3e:	b1 f0       	breq	.+44     	; 0xf6c <_ZN5Motor9StopMotorEv+0x34>
     f40:	18 f4       	brcc	.+6      	; 0xf48 <_ZN5Motor9StopMotorEv+0x10>
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	31 f0       	breq	.+12     	; 0xf52 <_ZN5Motor9StopMotorEv+0x1a>
     f46:	08 95       	ret
     f48:	83 30       	cpi	r24, 0x03	; 3
     f4a:	e9 f0       	breq	.+58     	; 0xf86 <_ZN5Motor9StopMotorEv+0x4e>
     f4c:	84 30       	cpi	r24, 0x04	; 4
     f4e:	41 f1       	breq	.+80     	; 0xfa0 <_ZN5Motor9StopMotorEv+0x68>
     f50:	08 95       	ret
	{
		case 1:
			CLEAR	(DD_F1);
     f52:	e8 e0       	ldi	r30, 0x08	; 8
     f54:	f1 e0       	ldi	r31, 0x01	; 1
     f56:	80 81       	ld	r24, Z
     f58:	8e 7f       	andi	r24, 0xFE	; 254
     f5a:	80 83       	st	Z, r24
			CLEAR	(DD_B1);
     f5c:	80 81       	ld	r24, Z
     f5e:	8d 7f       	andi	r24, 0xFD	; 253
     f60:	80 83       	st	Z, r24

			PWM_OCR1 = 0;
     f62:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     f66:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			break;
     f6a:	08 95       	ret
		case 2:
			CLEAR	(DD_F2);
     f6c:	e8 e0       	ldi	r30, 0x08	; 8
     f6e:	f1 e0       	ldi	r31, 0x01	; 1
     f70:	80 81       	ld	r24, Z
     f72:	8b 7f       	andi	r24, 0xFB	; 251
     f74:	80 83       	st	Z, r24
			CLEAR	(DD_B2);
     f76:	80 81       	ld	r24, Z
     f78:	87 7f       	andi	r24, 0xF7	; 247
     f7a:	80 83       	st	Z, r24

			PWM_OCR2 = 0;
     f7c:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     f80:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
			break;
     f84:	08 95       	ret
		case 3:
			CLEAR	(DD_F3);
     f86:	e8 e0       	ldi	r30, 0x08	; 8
     f88:	f1 e0       	ldi	r31, 0x01	; 1
     f8a:	80 81       	ld	r24, Z
     f8c:	8f 7d       	andi	r24, 0xDF	; 223
     f8e:	80 83       	st	Z, r24
			CLEAR	(DD_B3);
     f90:	80 81       	ld	r24, Z
     f92:	8f 7e       	andi	r24, 0xEF	; 239
     f94:	80 83       	st	Z, r24

			PWM_OCR3 = 0;
     f96:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     f9a:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
			break;
     f9e:	08 95       	ret
		case 4:
			CLEAR	(DD_F4);
     fa0:	e8 e0       	ldi	r30, 0x08	; 8
     fa2:	f1 e0       	ldi	r31, 0x01	; 1
     fa4:	80 81       	ld	r24, Z
     fa6:	8f 77       	andi	r24, 0x7F	; 127
     fa8:	80 83       	st	Z, r24
			CLEAR	(DD_B4);
     faa:	80 81       	ld	r24, Z
     fac:	8f 7b       	andi	r24, 0xBF	; 191
     fae:	80 83       	st	Z, r24

			PWM_OCR4 = 0;
     fb0:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     fb4:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     fb8:	08 95       	ret

00000fba <_ZN5Motor11SetOcrValueEi>:
	}
}


void Motor::SetOcrValue(int Ocr)
{
     fba:	0f 93       	push	r16
     fbc:	1f 93       	push	r17
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	8c 01       	movw	r16, r24
     fc4:	eb 01       	movw	r28, r22
    if (Ocr > 0)
     fc6:	1c 16       	cp	r1, r28
     fc8:	1d 06       	cpc	r1, r29
     fca:	0c f4       	brge	.+2      	; 0xfce <_ZN5Motor11SetOcrValueEi+0x14>
        SetForwardDirection();
     fcc:	53 df       	rcall	.-346    	; 0xe74 <_ZN5Motor19SetForwardDirectionEv>
	if( Ocr < 0)
     fce:	dd 23       	and	r29, r29
     fd0:	2c f4       	brge	.+10     	; 0xfdc <_ZN5Motor11SetOcrValueEi+0x22>
	{
		 Ocr = -Ocr;
     fd2:	d1 95       	neg	r29
     fd4:	c1 95       	neg	r28
     fd6:	d1 09       	sbc	r29, r1
		 SetReverseDirection();
     fd8:	c8 01       	movw	r24, r16
     fda:	7d df       	rcall	.-262    	; 0xed6 <_ZN5Motor19SetReverseDirectionEv>
     fdc:	ca 3f       	cpi	r28, 0xFA	; 250
     fde:	d1 05       	cpc	r29, r1
     fe0:	14 f0       	brlt	.+4      	; 0xfe6 <_ZN5Motor11SetOcrValueEi+0x2c>
     fe2:	c9 ef       	ldi	r28, 0xF9	; 249
     fe4:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if( Ocr > MAX_VALUE)
		Ocr = MAX_VALUE;

	switch(num)
     fe6:	f8 01       	movw	r30, r16
     fe8:	80 81       	ld	r24, Z
     fea:	82 30       	cpi	r24, 0x02	; 2
     fec:	71 f0       	breq	.+28     	; 0x100a <_ZN5Motor11SetOcrValueEi+0x50>
     fee:	18 f4       	brcc	.+6      	; 0xff6 <_ZN5Motor11SetOcrValueEi+0x3c>
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	31 f0       	breq	.+12     	; 0x1000 <_ZN5Motor11SetOcrValueEi+0x46>
     ff4:	18 c0       	rjmp	.+48     	; 0x1026 <_ZN5Motor11SetOcrValueEi+0x6c>
     ff6:	83 30       	cpi	r24, 0x03	; 3
     ff8:	69 f0       	breq	.+26     	; 0x1014 <_ZN5Motor11SetOcrValueEi+0x5a>
     ffa:	84 30       	cpi	r24, 0x04	; 4
     ffc:	81 f0       	breq	.+32     	; 0x101e <_ZN5Motor11SetOcrValueEi+0x64>
     ffe:	13 c0       	rjmp	.+38     	; 0x1026 <_ZN5Motor11SetOcrValueEi+0x6c>
	{
		case 1:
			PWM_OCR1	= Ocr;
    1000:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    1004:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			break;
    1008:	0e c0       	rjmp	.+28     	; 0x1026 <_ZN5Motor11SetOcrValueEi+0x6c>
		case 2:
			PWM_OCR2	= Ocr;
    100a:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    100e:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
			break;
    1012:	09 c0       	rjmp	.+18     	; 0x1026 <_ZN5Motor11SetOcrValueEi+0x6c>
		case 3:
			PWM_OCR3	= Ocr;
    1014:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
    1018:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
			break;
    101c:	04 c0       	rjmp	.+8      	; 0x1026 <_ZN5Motor11SetOcrValueEi+0x6c>
		case 4:
			PWM_OCR4	= Ocr;
    101e:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    1022:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
			break;
	}
}
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	0f 91       	pop	r16
    102e:	08 95       	ret

00001030 <_ZN5Motor10InitialiseEh>:
#include "Motor.h"



void Motor::Initialise(uint8_t no)
{
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	ec 01       	movw	r28, r24
	num = no;
    1036:	68 83       	st	Y, r22
	InitPWM();
    1038:	9f de       	rcall	.-706    	; 0xd78 <_ZN5Motor7InitPWMEv>

	StopMotor();
    103a:	ce 01       	movw	r24, r28
    103c:	7d df       	rcall	.-262    	; 0xf38 <_ZN5Motor9StopMotorEv>
	SetOcrValue(0);
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	ce 01       	movw	r24, r28
    1044:	ba df       	rcall	.-140    	; 0xfba <_ZN5Motor11SetOcrValueEi>

}
    1046:	df 91       	pop	r29
    1048:	cf 91       	pop	r28
    104a:	08 95       	ret

0000104c <_ZN3PID7Set_PidEfff>:


#include "PID.h"

void PID::Set_Pid(float kP,float kI,float kD)
{
    104c:	cf 92       	push	r12
    104e:	df 92       	push	r13
    1050:	ef 92       	push	r14
    1052:	ff 92       	push	r15
    1054:	0f 93       	push	r16
    1056:	1f 93       	push	r17
    1058:	fc 01       	movw	r30, r24
	kp = kP;
    105a:	40 83       	st	Z, r20
    105c:	51 83       	std	Z+1, r21	; 0x01
    105e:	62 83       	std	Z+2, r22	; 0x02
    1060:	73 83       	std	Z+3, r23	; 0x03
	ki = kI;
    1062:	04 83       	std	Z+4, r16	; 0x04
    1064:	15 83       	std	Z+5, r17	; 0x05
    1066:	26 83       	std	Z+6, r18	; 0x06
    1068:	37 83       	std	Z+7, r19	; 0x07
	kd = kD;	
    106a:	c0 86       	std	Z+8, r12	; 0x08
    106c:	d1 86       	std	Z+9, r13	; 0x09
    106e:	e2 86       	std	Z+10, r14	; 0x0a
    1070:	f3 86       	std	Z+11, r15	; 0x0b
}
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	df 90       	pop	r13
    107c:	cf 90       	pop	r12
    107e:	08 95       	ret

00001080 <_ZN3PID7ComputeEi>:


float PID::Compute(int input)
{
    1080:	8f 92       	push	r8
    1082:	9f 92       	push	r9
    1084:	af 92       	push	r10
    1086:	bf 92       	push	r11
    1088:	ef 92       	push	r14
    108a:	ff 92       	push	r15
    108c:	0f 93       	push	r16
    108e:	1f 93       	push	r17
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
    1094:	ec 01       	movw	r28, r24
    1096:	7b 01       	movw	r14, r22
	error = sp - input;
    1098:	6c 85       	ldd	r22, Y+12	; 0x0c
    109a:	7d 85       	ldd	r23, Y+13	; 0x0d
    109c:	8b 01       	movw	r16, r22
    109e:	0e 19       	sub	r16, r14
    10a0:	1f 09       	sbc	r17, r15
    10a2:	1f 87       	std	Y+15, r17	; 0x0f
    10a4:	0e 87       	std	Y+14, r16	; 0x0e
	
	errorsum += error;
    10a6:	8a 89       	ldd	r24, Y+18	; 0x12
    10a8:	9b 89       	ldd	r25, Y+19	; 0x13
    10aa:	80 0f       	add	r24, r16
    10ac:	91 1f       	adc	r25, r17
	
	//Limiting I-term
	if (errorsum > 125)
    10ae:	8e 37       	cpi	r24, 0x7E	; 126
    10b0:	91 05       	cpc	r25, r1
    10b2:	2c f0       	brlt	.+10     	; 0x10be <_ZN3PID7ComputeEi+0x3e>
		errorsum = 125;
    10b4:	8d e7       	ldi	r24, 0x7D	; 125
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	9b 8b       	std	Y+19, r25	; 0x13
    10ba:	8a 8b       	std	Y+18, r24	; 0x12
    10bc:	0b c0       	rjmp	.+22     	; 0x10d4 <_ZN3PID7ComputeEi+0x54>
	else if (errorsum < -125)
    10be:	83 38       	cpi	r24, 0x83	; 131
    10c0:	2f ef       	ldi	r18, 0xFF	; 255
    10c2:	92 07       	cpc	r25, r18
    10c4:	1c f0       	brlt	.+6      	; 0x10cc <_ZN3PID7ComputeEi+0x4c>

float PID::Compute(int input)
{
	error = sp - input;
	
	errorsum += error;
    10c6:	9b 8b       	std	Y+19, r25	; 0x13
    10c8:	8a 8b       	std	Y+18, r24	; 0x12
    10ca:	04 c0       	rjmp	.+8      	; 0x10d4 <_ZN3PID7ComputeEi+0x54>
	
	//Limiting I-term
	if (errorsum > 125)
		errorsum = 125;
	else if (errorsum < -125)
		errorsum = -125;
    10cc:	83 e8       	ldi	r24, 0x83	; 131
    10ce:	9f ef       	ldi	r25, 0xFF	; 255
    10d0:	9b 8b       	std	Y+19, r25	; 0x13
    10d2:	8a 8b       	std	Y+18, r24	; 0x12
	
	cv += error*kp + errorsum*ki - kd*(input-lastinput);
    10d4:	6a 89       	ldd	r22, Y+18	; 0x12
    10d6:	7b 89       	ldd	r23, Y+19	; 0x13
    10d8:	07 2e       	mov	r0, r23
    10da:	00 0c       	add	r0, r0
    10dc:	88 0b       	sbc	r24, r24
    10de:	99 0b       	sbc	r25, r25
    10e0:	16 d5       	rcall	.+2604   	; 0x1b0e <__floatsisf>
    10e2:	2c 81       	ldd	r18, Y+4	; 0x04
    10e4:	3d 81       	ldd	r19, Y+5	; 0x05
    10e6:	4e 81       	ldd	r20, Y+6	; 0x06
    10e8:	5f 81       	ldd	r21, Y+7	; 0x07
    10ea:	c1 d5       	rcall	.+2946   	; 0x1c6e <__mulsf3>
    10ec:	4b 01       	movw	r8, r22
    10ee:	5c 01       	movw	r10, r24
    10f0:	b8 01       	movw	r22, r16
    10f2:	11 0f       	add	r17, r17
    10f4:	88 0b       	sbc	r24, r24
    10f6:	99 0b       	sbc	r25, r25
    10f8:	0a d5       	rcall	.+2580   	; 0x1b0e <__floatsisf>
    10fa:	28 81       	ld	r18, Y
    10fc:	39 81       	ldd	r19, Y+1	; 0x01
    10fe:	4a 81       	ldd	r20, Y+2	; 0x02
    1100:	5b 81       	ldd	r21, Y+3	; 0x03
    1102:	b5 d5       	rcall	.+2922   	; 0x1c6e <__mulsf3>
    1104:	9b 01       	movw	r18, r22
    1106:	ac 01       	movw	r20, r24
    1108:	c5 01       	movw	r24, r10
    110a:	b4 01       	movw	r22, r8
    110c:	fd d3       	rcall	.+2042   	; 0x1908 <__addsf3>
    110e:	4b 01       	movw	r8, r22
    1110:	5c 01       	movw	r10, r24
    1112:	88 89       	ldd	r24, Y+16	; 0x10
    1114:	99 89       	ldd	r25, Y+17	; 0x11
    1116:	b7 01       	movw	r22, r14
    1118:	68 1b       	sub	r22, r24
    111a:	79 0b       	sbc	r23, r25
    111c:	07 2e       	mov	r0, r23
    111e:	00 0c       	add	r0, r0
    1120:	88 0b       	sbc	r24, r24
    1122:	99 0b       	sbc	r25, r25
    1124:	f4 d4       	rcall	.+2536   	; 0x1b0e <__floatsisf>
    1126:	28 85       	ldd	r18, Y+8	; 0x08
    1128:	39 85       	ldd	r19, Y+9	; 0x09
    112a:	4a 85       	ldd	r20, Y+10	; 0x0a
    112c:	5b 85       	ldd	r21, Y+11	; 0x0b
    112e:	9f d5       	rcall	.+2878   	; 0x1c6e <__mulsf3>
    1130:	9b 01       	movw	r18, r22
    1132:	ac 01       	movw	r20, r24
    1134:	c5 01       	movw	r24, r10
    1136:	b4 01       	movw	r22, r8
    1138:	e6 d3       	rcall	.+1996   	; 0x1906 <__subsf3>
    113a:	2c 89       	ldd	r18, Y+20	; 0x14
    113c:	3d 89       	ldd	r19, Y+21	; 0x15
    113e:	4e 89       	ldd	r20, Y+22	; 0x16
    1140:	5f 89       	ldd	r21, Y+23	; 0x17
    1142:	e2 d3       	rcall	.+1988   	; 0x1908 <__addsf3>
    1144:	6c 8b       	std	Y+20, r22	; 0x14
    1146:	7d 8b       	std	Y+21, r23	; 0x15
    1148:	8e 8b       	std	Y+22, r24	; 0x16
    114a:	9f 8b       	std	Y+23, r25	; 0x17
	
	lastinput = input;
    114c:	f9 8a       	std	Y+17, r15	; 0x11
    114e:	e8 8a       	std	Y+16, r14	; 0x10
	return cv;
}
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	1f 91       	pop	r17
    1156:	0f 91       	pop	r16
    1158:	ff 90       	pop	r15
    115a:	ef 90       	pop	r14
    115c:	bf 90       	pop	r11
    115e:	af 90       	pop	r10
    1160:	9f 90       	pop	r9
    1162:	8f 90       	pop	r8
    1164:	08 95       	ret

00001166 <_ZN3PID13angle_ComputeEi>:

float PID::angle_Compute(int input)
{
    1166:	8f 92       	push	r8
    1168:	9f 92       	push	r9
    116a:	af 92       	push	r10
    116c:	bf 92       	push	r11
    116e:	ef 92       	push	r14
    1170:	ff 92       	push	r15
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	ec 01       	movw	r28, r24
    117c:	7b 01       	movw	r14, r22
	error = sp - input;
    117e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1180:	7d 85       	ldd	r23, Y+13	; 0x0d
    1182:	8b 01       	movw	r16, r22
    1184:	0e 19       	sub	r16, r14
    1186:	1f 09       	sbc	r17, r15
    1188:	1f 87       	std	Y+15, r17	; 0x0f
    118a:	0e 87       	std	Y+14, r16	; 0x0e
	
	errorsum += error;
    118c:	8a 89       	ldd	r24, Y+18	; 0x12
    118e:	9b 89       	ldd	r25, Y+19	; 0x13
    1190:	80 0f       	add	r24, r16
    1192:	91 1f       	adc	r25, r17
	
	//Limiting I-term
	if (errorsum > 125)
    1194:	8e 37       	cpi	r24, 0x7E	; 126
    1196:	91 05       	cpc	r25, r1
    1198:	2c f0       	brlt	.+10     	; 0x11a4 <_ZN3PID13angle_ComputeEi+0x3e>
	errorsum = 125;
    119a:	8d e7       	ldi	r24, 0x7D	; 125
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	9b 8b       	std	Y+19, r25	; 0x13
    11a0:	8a 8b       	std	Y+18, r24	; 0x12
    11a2:	0b c0       	rjmp	.+22     	; 0x11ba <_ZN3PID13angle_ComputeEi+0x54>
	else if (errorsum < -125)
    11a4:	83 38       	cpi	r24, 0x83	; 131
    11a6:	2f ef       	ldi	r18, 0xFF	; 255
    11a8:	92 07       	cpc	r25, r18
    11aa:	1c f0       	brlt	.+6      	; 0x11b2 <_ZN3PID13angle_ComputeEi+0x4c>

float PID::angle_Compute(int input)
{
	error = sp - input;
	
	errorsum += error;
    11ac:	9b 8b       	std	Y+19, r25	; 0x13
    11ae:	8a 8b       	std	Y+18, r24	; 0x12
    11b0:	04 c0       	rjmp	.+8      	; 0x11ba <_ZN3PID13angle_ComputeEi+0x54>
	
	//Limiting I-term
	if (errorsum > 125)
	errorsum = 125;
	else if (errorsum < -125)
	errorsum = -125;
    11b2:	83 e8       	ldi	r24, 0x83	; 131
    11b4:	9f ef       	ldi	r25, 0xFF	; 255
    11b6:	9b 8b       	std	Y+19, r25	; 0x13
    11b8:	8a 8b       	std	Y+18, r24	; 0x12
	
	cv = error*kp + errorsum*ki - kd*(input-lastinput);
    11ba:	6a 89       	ldd	r22, Y+18	; 0x12
    11bc:	7b 89       	ldd	r23, Y+19	; 0x13
    11be:	07 2e       	mov	r0, r23
    11c0:	00 0c       	add	r0, r0
    11c2:	88 0b       	sbc	r24, r24
    11c4:	99 0b       	sbc	r25, r25
    11c6:	a3 d4       	rcall	.+2374   	; 0x1b0e <__floatsisf>
    11c8:	2c 81       	ldd	r18, Y+4	; 0x04
    11ca:	3d 81       	ldd	r19, Y+5	; 0x05
    11cc:	4e 81       	ldd	r20, Y+6	; 0x06
    11ce:	5f 81       	ldd	r21, Y+7	; 0x07
    11d0:	4e d5       	rcall	.+2716   	; 0x1c6e <__mulsf3>
    11d2:	4b 01       	movw	r8, r22
    11d4:	5c 01       	movw	r10, r24
    11d6:	b8 01       	movw	r22, r16
    11d8:	11 0f       	add	r17, r17
    11da:	88 0b       	sbc	r24, r24
    11dc:	99 0b       	sbc	r25, r25
    11de:	97 d4       	rcall	.+2350   	; 0x1b0e <__floatsisf>
    11e0:	28 81       	ld	r18, Y
    11e2:	39 81       	ldd	r19, Y+1	; 0x01
    11e4:	4a 81       	ldd	r20, Y+2	; 0x02
    11e6:	5b 81       	ldd	r21, Y+3	; 0x03
    11e8:	42 d5       	rcall	.+2692   	; 0x1c6e <__mulsf3>
    11ea:	9b 01       	movw	r18, r22
    11ec:	ac 01       	movw	r20, r24
    11ee:	c5 01       	movw	r24, r10
    11f0:	b4 01       	movw	r22, r8
    11f2:	8a d3       	rcall	.+1812   	; 0x1908 <__addsf3>
    11f4:	4b 01       	movw	r8, r22
    11f6:	5c 01       	movw	r10, r24
    11f8:	88 89       	ldd	r24, Y+16	; 0x10
    11fa:	99 89       	ldd	r25, Y+17	; 0x11
    11fc:	b7 01       	movw	r22, r14
    11fe:	68 1b       	sub	r22, r24
    1200:	79 0b       	sbc	r23, r25
    1202:	07 2e       	mov	r0, r23
    1204:	00 0c       	add	r0, r0
    1206:	88 0b       	sbc	r24, r24
    1208:	99 0b       	sbc	r25, r25
    120a:	81 d4       	rcall	.+2306   	; 0x1b0e <__floatsisf>
    120c:	28 85       	ldd	r18, Y+8	; 0x08
    120e:	39 85       	ldd	r19, Y+9	; 0x09
    1210:	4a 85       	ldd	r20, Y+10	; 0x0a
    1212:	5b 85       	ldd	r21, Y+11	; 0x0b
    1214:	2c d5       	rcall	.+2648   	; 0x1c6e <__mulsf3>
    1216:	9b 01       	movw	r18, r22
    1218:	ac 01       	movw	r20, r24
    121a:	c5 01       	movw	r24, r10
    121c:	b4 01       	movw	r22, r8
    121e:	73 d3       	rcall	.+1766   	; 0x1906 <__subsf3>
    1220:	6c 8b       	std	Y+20, r22	; 0x14
    1222:	7d 8b       	std	Y+21, r23	; 0x15
    1224:	8e 8b       	std	Y+22, r24	; 0x16
    1226:	9f 8b       	std	Y+23, r25	; 0x17
	
	lastinput = input;
    1228:	f9 8a       	std	Y+17, r15	; 0x11
    122a:	e8 8a       	std	Y+16, r14	; 0x10
	return cv;
}
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	ff 90       	pop	r15
    1236:	ef 90       	pop	r14
    1238:	bf 90       	pop	r11
    123a:	af 90       	pop	r10
    123c:	9f 90       	pop	r9
    123e:	8f 90       	pop	r8
    1240:	08 95       	ret

00001242 <_Z21initialise_timeperiodv>:

//initialize global timer

void initialise_timeperiod()
{
	TCCR2B |= (1<<CS22);
    1242:	e1 eb       	ldi	r30, 0xB1	; 177
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	84 60       	ori	r24, 0x04	; 4
    124a:	80 83       	st	Z, r24
	TIMSK2 |= (1<<TOIE2);
    124c:	e0 e7       	ldi	r30, 0x70	; 112
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	81 60       	ori	r24, 0x01	; 1
    1254:	80 83       	st	Z, r24
	TCNT2 = 0;
    1256:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
    125a:	08 95       	ret

0000125c <_Z20close_all_pneumaticsv>:
	}
}

void close_all_pneumatics()
{
	RACK_GRIP_OPEN();
    125c:	88 98       	cbi	0x11, 0	; 17
	RACK_LIFT_CLOSE();
    125e:	89 98       	cbi	0x11, 1	; 17
	SHUTTCOCK_GRIP_CLOSE();
    1260:	8c 98       	cbi	0x11, 4	; 17
	SHUTTCOCK_PASS_CLOSE();
    1262:	8d 98       	cbi	0x11, 5	; 17
    1264:	08 95       	ret

00001266 <_Z21initialize_pneumaticsv>:
}

void initialize_pneumatics()
{
	OUTPUT(RACK_GRAB);
    1266:	80 9a       	sbi	0x10, 0	; 16
	OUTPUT(LIFT_RACK);
    1268:	81 9a       	sbi	0x10, 1	; 16
	OUTPUT(SC_PASS);
    126a:	85 9a       	sbi	0x10, 5	; 16
	OUTPUT(SC_GRIPPER);
    126c:	84 9a       	sbi	0x10, 4	; 16
	close_all_pneumatics();
    126e:	f6 cf       	rjmp	.-20     	; 0x125c <_Z20close_all_pneumaticsv>
    1270:	08 95       	ret

00001272 <_Z6millisv>:
//calculate the time from beggining of robot start 

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1272:	2f b7       	in	r18, 0x3f	; 63
	
	// disable interrupts while we read timer2_millis or we might get an
	// inconsistent value 
	cli();
    1274:	f8 94       	cli
	m = timer2_millis;
    1276:	60 91 c4 02 	lds	r22, 0x02C4	; 0x8002c4 <timer2_millis>
    127a:	70 91 c5 02 	lds	r23, 0x02C5	; 0x8002c5 <timer2_millis+0x1>
    127e:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <timer2_millis+0x2>
    1282:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <timer2_millis+0x3>
	SREG = oldSREG;
    1286:	2f bf       	out	0x3f, r18	; 63
	
	return m;
}
    1288:	08 95       	ret

0000128a <_Z9rack_initv>:
	TCNT2 = 0;
}


void rack_init()
{
    128a:	cf 92       	push	r12
    128c:	df 92       	push	r13
    128e:	ef 92       	push	r14
    1290:	ff 92       	push	r15
    1292:	0f 93       	push	r16
    1294:	1f 93       	push	r17
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
	
	Geneva_Start = false;
    129a:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <Geneva_Start>
	Buttonx_pressed = false;
    129e:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <Buttonx_pressed>
	donotstop = false;
    12a2:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <donotstop>
	throw_rack = false;
    12a6:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <throw_rack>
	rack_throw_auto = false;
    12aa:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <rack_throw_auto>
	pneumatic_geneva_start = false;
    12ae:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <pneumatic_geneva_start>
	inside_robot = true;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <inside_robot>
    pass_the_shuttcock = false;
    12b8:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <pass_the_shuttcock>
	angle_pid_compute = false;
    12bc:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <angle_pid_compute>
	
	pneumatic_geneva_time = 0;
    12c0:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <pneumatic_geneva_time>
    12c4:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <pneumatic_geneva_time+0x1>
    12c8:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <pneumatic_geneva_time+0x2>
    12cc:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <pneumatic_geneva_time+0x3>
	ramp_speed = RACK_SPEED_MOTOR;
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	a9 e7       	ldi	r26, 0x79	; 121
    12d6:	b3 e4       	ldi	r27, 0x43	; 67
    12d8:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <ramp_speed>
    12dc:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <ramp_speed+0x1>
    12e0:	a0 93 ca 02 	sts	0x02CA, r26	; 0x8002ca <ramp_speed+0x2>
    12e4:	b0 93 cb 02 	sts	0x02CB, r27	; 0x8002cb <ramp_speed+0x3>
	
	RackMotor.Initialise(1);
    12e8:	61 e0       	ldi	r22, 0x01	; 1
    12ea:	8b e0       	ldi	r24, 0x0B	; 11
    12ec:	93 e0       	ldi	r25, 0x03	; 3
    12ee:	74 d2       	rcall	.+1256   	; 0x17d8 <_ZN10Rack_Motor10InitialiseEh>
	GenevaMotor.Initialise(2);
    12f0:	62 e0       	ldi	r22, 0x02	; 2
    12f2:	8a e0       	ldi	r24, 0x0A	; 10
    12f4:	93 e0       	ldi	r25, 0x03	; 3
    12f6:	70 d2       	rcall	.+1248   	; 0x17d8 <_ZN10Rack_Motor10InitialiseEh>
	
	RackEncoder.Initialise(1);
    12f8:	61 e0       	ldi	r22, 0x01	; 1
    12fa:	8d ef       	ldi	r24, 0xFD	; 253
    12fc:	92 e0       	ldi	r25, 0x02	; 2
    12fe:	b3 d1       	rcall	.+870    	; 0x1666 <_ZN12Rack_Encoder10InitialiseEh>
	GenevaEncoder.Initialise(2);
    1300:	62 e0       	ldi	r22, 0x02	; 2
    1302:	80 ef       	ldi	r24, 0xF0	; 240
    1304:	92 e0       	ldi	r25, 0x02	; 2
    1306:	af d1       	rcall	.+862    	; 0x1666 <_ZN12Rack_Encoder10InitialiseEh>
	
	
	INPUT(LIMIT_SWITCH_PIN);
    1308:	e1 e0       	ldi	r30, 0x01	; 1
    130a:	f1 e0       	ldi	r31, 0x01	; 1
    130c:	80 81       	ld	r24, Z
    130e:	87 7f       	andi	r24, 0xF7	; 247
    1310:	80 83       	st	Z, r24
	SET(LIMIT_SWITCH_PIN);
    1312:	e2 e0       	ldi	r30, 0x02	; 2
    1314:	f1 e0       	ldi	r31, 0x01	; 1
    1316:	80 81       	ld	r24, Z
    1318:	88 60       	ori	r24, 0x08	; 8
	initialize_pneumatics();
    131a:	80 83       	st	Z, r24
    131c:	a4 df       	rcall	.-184    	; 0x1266 <_Z21initialize_pneumaticsv>
	
	//home position of rack rotate
	while(READ(LIMIT_SWITCH_PIN))
    131e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    1322:	83 ff       	sbrs	r24, 3
    1324:	0a c0       	rjmp	.+20     	; 0x133a <_Z9rack_initv+0xb0>
    1326:	c0 e0       	ldi	r28, 0x00	; 0
	{
		RackMotor.SetOcrValue(RACK_SPEED_MOTOR);
    1328:	d1 e0       	ldi	r29, 0x01	; 1
    132a:	69 ef       	ldi	r22, 0xF9	; 249
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	8b e0       	ldi	r24, 0x0B	; 11
    1330:	93 e0       	ldi	r25, 0x03	; 3
	INPUT(LIMIT_SWITCH_PIN);
	SET(LIMIT_SWITCH_PIN);
	initialize_pneumatics();
	
	//home position of rack rotate
	while(READ(LIMIT_SWITCH_PIN))
    1332:	27 d2       	rcall	.+1102   	; 0x1782 <_ZN10Rack_Motor11SetOcrValueEi>
    1334:	88 81       	ld	r24, Y
    1336:	83 fd       	sbrc	r24, 3
	{
		RackMotor.SetOcrValue(RACK_SPEED_MOTOR);
	}
	
	previous_time = millis();
    1338:	f8 cf       	rjmp	.-16     	; 0x132a <_Z9rack_initv+0xa0>
    133a:	9b df       	rcall	.-202    	; 0x1272 <_Z6millisv>
    133c:	60 93 ec 02 	sts	0x02EC, r22	; 0x8002ec <previous_time>
    1340:	70 93 ed 02 	sts	0x02ED, r23	; 0x8002ed <previous_time+0x1>
    1344:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <previous_time+0x2>
    1348:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <previous_time+0x3>
	RackMotor.StopMotor();
    134c:	8b e0       	ldi	r24, 0x0B	; 11
    134e:	93 e0       	ldi	r25, 0x03	; 3
    1350:	fb d1       	rcall	.+1014   	; 0x1748 <_ZN10Rack_Motor9StopMotorEv>
	inline void Set_count(int val){pprcount = val;};
    1352:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <RackEncoder+0x5>
    1356:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <RackEncoder+0x6>
    135a:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <RackEncoder+0x7>
    135e:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <RackEncoder+0x8>
	RackEncoder.Set_count(0);
	Rack_home_position = true;		// true rack home-position -- initial position and false rack position -- final position
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <Rack_home_position>
	angle_pid.Set_Pid(47.29,0.139,29.30);
    1368:	0f 2e       	mov	r0, r31
    136a:	f6 e6       	ldi	r31, 0x66	; 102
    136c:	cf 2e       	mov	r12, r31
    136e:	dc 2c       	mov	r13, r12
    1370:	fa ee       	ldi	r31, 0xEA	; 234
    1372:	ef 2e       	mov	r14, r31
    1374:	f1 e4       	ldi	r31, 0x41	; 65
    1376:	ff 2e       	mov	r15, r31
    1378:	f0 2d       	mov	r31, r0
    137a:	04 e0       	ldi	r16, 0x04	; 4
    137c:	16 e5       	ldi	r17, 0x56	; 86
    137e:	2e e0       	ldi	r18, 0x0E	; 14
    1380:	3e e3       	ldi	r19, 0x3E	; 62
    1382:	46 ef       	ldi	r20, 0xF6	; 246
    1384:	58 e2       	ldi	r21, 0x28	; 40
    1386:	6d e3       	ldi	r22, 0x3D	; 61
    1388:	72 e4       	ldi	r23, 0x42	; 66
    138a:	8c ec       	ldi	r24, 0xCC	; 204
    138c:	92 e0       	ldi	r25, 0x02	; 2
	initialise_timeperiod();
    138e:	5e de       	rcall	.-836    	; 0x104c <_ZN3PID7Set_PidEfff>
    1390:	58 df       	rcall	.-336    	; 0x1242 <_Z21initialise_timeperiodv>
}
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	1f 91       	pop	r17
    1398:	0f 91       	pop	r16
    139a:	ff 90       	pop	r15
    139c:	ef 90       	pop	r14
    139e:	df 90       	pop	r13
    13a0:	cf 90       	pop	r12
    13a2:	08 95       	ret

000013a4 <_Z16rack_limit_checkv>:


void rack_limit_check()
{
	
	if(!READ(LIMIT_SWITCH_PIN) && !Rack_home_position )
    13a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    13a8:	83 fd       	sbrc	r24, 3
    13aa:	04 c0       	rjmp	.+8      	; 0x13b4 <_Z16rack_limit_checkv+0x10>
    13ac:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <Rack_home_position>
    13b0:	88 23       	and	r24, r24
    13b2:	69 f0       	breq	.+26     	; 0x13ce <_Z16rack_limit_checkv+0x2a>
		Buttonx_pressed = false;
		throw_rack = true;	
		previous_time = millis();
		ramp_speed = RACK_SPEED_MOTOR;
	}
	if(READ(LIMIT_SWITCH_PIN) && throw_rack && rack_throw_auto)
    13b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    13b8:	83 ff       	sbrs	r24, 3
    13ba:	36 c0       	rjmp	.+108    	; 0x1428 <_Z16rack_limit_checkv+0x84>
    13bc:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <throw_rack>
    13c0:	88 23       	and	r24, r24
    13c2:	91 f1       	breq	.+100    	; 0x1428 <_Z16rack_limit_checkv+0x84>
    13c4:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <rack_throw_auto>
    13c8:	81 11       	cpse	r24, r1
    13ca:	29 c0       	rjmp	.+82     	; 0x141e <_Z16rack_limit_checkv+0x7a>
    13cc:	08 95       	ret
void rack_limit_check()
{
	
	if(!READ(LIMIT_SWITCH_PIN) && !Rack_home_position )
	{
		RackMotor.StopMotor();
    13ce:	8b e0       	ldi	r24, 0x0B	; 11
    13d0:	93 e0       	ldi	r25, 0x03	; 3
    13d2:	ba d1       	rcall	.+884    	; 0x1748 <_ZN10Rack_Motor9StopMotorEv>
		Rack_home_position = true;
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <Rack_home_position>
    13da:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <RackEncoder+0x5>
    13de:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <RackEncoder+0x6>
    13e2:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <RackEncoder+0x7>
    13e6:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <RackEncoder+0x8>
		RackEncoder.Set_count(0);
		Buttonx_pressed = false;
    13ea:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <Buttonx_pressed>
		throw_rack = true;	
    13ee:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <throw_rack>
		previous_time = millis();
    13f2:	3f df       	rcall	.-386    	; 0x1272 <_Z6millisv>
    13f4:	60 93 ec 02 	sts	0x02EC, r22	; 0x8002ec <previous_time>
    13f8:	70 93 ed 02 	sts	0x02ED, r23	; 0x8002ed <previous_time+0x1>
    13fc:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <previous_time+0x2>
    1400:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <previous_time+0x3>
		ramp_speed = RACK_SPEED_MOTOR;
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	a9 e7       	ldi	r26, 0x79	; 121
    140a:	b3 e4       	ldi	r27, 0x43	; 67
    140c:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <ramp_speed>
    1410:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <ramp_speed+0x1>
    1414:	a0 93 ca 02 	sts	0x02CA, r26	; 0x8002ca <ramp_speed+0x2>
    1418:	b0 93 cb 02 	sts	0x02CB, r27	; 0x8002cb <ramp_speed+0x3>
    141c:	cb cf       	rjmp	.-106    	; 0x13b4 <_Z16rack_limit_checkv+0x10>
	}
	if(READ(LIMIT_SWITCH_PIN) && throw_rack && rack_throw_auto)
	{
		RackMotor.SetOcrValue(RACK_SPEED_MOTOR);
    141e:	69 ef       	ldi	r22, 0xF9	; 249
    1420:	70 e0       	ldi	r23, 0x00	; 0
    1422:	8b e0       	ldi	r24, 0x0B	; 11
    1424:	93 e0       	ldi	r25, 0x03	; 3
    1426:	ad c1       	rjmp	.+858    	; 0x1782 <_ZN10Rack_Motor11SetOcrValueEi>
    1428:	08 95       	ret

0000142a <__vector_15>:



//Global timer2 interrupt

ISR(TIMER2_OVF_vect) {
    142a:	1f 92       	push	r1
    142c:	0f 92       	push	r0
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	0f 92       	push	r0
    1432:	11 24       	eor	r1, r1
    1434:	8f 93       	push	r24
    1436:	9f 93       	push	r25
    1438:	af 93       	push	r26
    143a:	bf 93       	push	r27
	timer2_millis += 1;
    143c:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <timer2_millis>
    1440:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <timer2_millis+0x1>
    1444:	a0 91 c6 02 	lds	r26, 0x02C6	; 0x8002c6 <timer2_millis+0x2>
    1448:	b0 91 c7 02 	lds	r27, 0x02C7	; 0x8002c7 <timer2_millis+0x3>
    144c:	01 96       	adiw	r24, 0x01	; 1
    144e:	a1 1d       	adc	r26, r1
    1450:	b1 1d       	adc	r27, r1
    1452:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <timer2_millis>
    1456:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <timer2_millis+0x1>
    145a:	a0 93 c6 02 	sts	0x02C6, r26	; 0x8002c6 <timer2_millis+0x2>
    145e:	b0 93 c7 02 	sts	0x02C7, r27	; 0x8002c7 <timer2_millis+0x3>
	timer2_fract += 3;
    1462:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <timer2_fract>
    1466:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <timer2_fract+0x1>
    146a:	a0 91 c2 02 	lds	r26, 0x02C2	; 0x8002c2 <timer2_fract+0x2>
    146e:	b0 91 c3 02 	lds	r27, 0x02C3	; 0x8002c3 <timer2_fract+0x3>
    1472:	03 96       	adiw	r24, 0x03	; 3
    1474:	a1 1d       	adc	r26, r1
    1476:	b1 1d       	adc	r27, r1
    1478:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <timer2_fract>
    147c:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <timer2_fract+0x1>
    1480:	a0 93 c2 02 	sts	0x02C2, r26	; 0x8002c2 <timer2_fract+0x2>
    1484:	b0 93 c3 02 	sts	0x02C3, r27	; 0x8002c3 <timer2_fract+0x3>
	if (timer2_fract >= 125) {
    1488:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <timer2_fract>
    148c:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <timer2_fract+0x1>
    1490:	a0 91 c2 02 	lds	r26, 0x02C2	; 0x8002c2 <timer2_fract+0x2>
    1494:	b0 91 c3 02 	lds	r27, 0x02C3	; 0x8002c3 <timer2_fract+0x3>
    1498:	8d 37       	cpi	r24, 0x7D	; 125
    149a:	91 05       	cpc	r25, r1
    149c:	a1 05       	cpc	r26, r1
    149e:	b1 05       	cpc	r27, r1
    14a0:	38 f1       	brcs	.+78     	; 0x14f0 <__vector_15+0xc6>
		timer2_fract -= 125;
    14a2:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <timer2_fract>
    14a6:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <timer2_fract+0x1>
    14aa:	a0 91 c2 02 	lds	r26, 0x02C2	; 0x8002c2 <timer2_fract+0x2>
    14ae:	b0 91 c3 02 	lds	r27, 0x02C3	; 0x8002c3 <timer2_fract+0x3>
    14b2:	8d 57       	subi	r24, 0x7D	; 125
    14b4:	91 09       	sbc	r25, r1
    14b6:	a1 09       	sbc	r26, r1
    14b8:	b1 09       	sbc	r27, r1
    14ba:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <timer2_fract>
    14be:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <timer2_fract+0x1>
    14c2:	a0 93 c2 02 	sts	0x02C2, r26	; 0x8002c2 <timer2_fract+0x2>
    14c6:	b0 93 c3 02 	sts	0x02C3, r27	; 0x8002c3 <timer2_fract+0x3>
		timer2_millis += 1;
    14ca:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <timer2_millis>
    14ce:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <timer2_millis+0x1>
    14d2:	a0 91 c6 02 	lds	r26, 0x02C6	; 0x8002c6 <timer2_millis+0x2>
    14d6:	b0 91 c7 02 	lds	r27, 0x02C7	; 0x8002c7 <timer2_millis+0x3>
    14da:	01 96       	adiw	r24, 0x01	; 1
    14dc:	a1 1d       	adc	r26, r1
    14de:	b1 1d       	adc	r27, r1
    14e0:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <timer2_millis>
    14e4:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <timer2_millis+0x1>
    14e8:	a0 93 c6 02 	sts	0x02C6, r26	; 0x8002c6 <timer2_millis+0x2>
    14ec:	b0 93 c7 02 	sts	0x02C7, r27	; 0x8002c7 <timer2_millis+0x3>
	}
}
    14f0:	bf 91       	pop	r27
    14f2:	af 91       	pop	r26
    14f4:	9f 91       	pop	r25
    14f6:	8f 91       	pop	r24
    14f8:	0f 90       	pop	r0
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	0f 90       	pop	r0
    14fe:	1f 90       	pop	r1
    1500:	18 95       	reti

00001502 <__vector_5>:

ISR(INT_VECT5)
{
    1502:	1f 92       	push	r1
    1504:	0f 92       	push	r0
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	0f 92       	push	r0
    150a:	11 24       	eor	r1, r1
    150c:	0b b6       	in	r0, 0x3b	; 59
    150e:	0f 92       	push	r0
    1510:	8f 93       	push	r24
    1512:	9f 93       	push	r25
    1514:	af 93       	push	r26
    1516:	bf 93       	push	r27
    1518:	ef 93       	push	r30
    151a:	ff 93       	push	r31
	if(bit_is_clear(ENCODER5_CHAPORTPIN,ENCODER5_CHBPIN))		//ENCODER_CHAPORTPIN,ENCODER_CHBPIN
    151c:	35 99       	sbic	0x06, 5	; 6
    151e:	0e c0       	rjmp	.+28     	; 0x153c <__vector_5+0x3a>
	void Initialise(uint8_t x);
	void Init_Interrupts();
	inline void Calc_Speed();
	inline long int Get_Speed(){return speed;};
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
    1520:	ed ef       	ldi	r30, 0xFD	; 253
    1522:	f2 e0       	ldi	r31, 0x02	; 2
    1524:	85 81       	ldd	r24, Z+5	; 0x05
    1526:	96 81       	ldd	r25, Z+6	; 0x06
    1528:	a7 81       	ldd	r26, Z+7	; 0x07
    152a:	b0 85       	ldd	r27, Z+8	; 0x08
    152c:	01 96       	adiw	r24, 0x01	; 1
    152e:	a1 1d       	adc	r26, r1
    1530:	b1 1d       	adc	r27, r1
    1532:	85 83       	std	Z+5, r24	; 0x05
    1534:	96 83       	std	Z+6, r25	; 0x06
    1536:	a7 83       	std	Z+7, r26	; 0x07
    1538:	b0 87       	std	Z+8, r27	; 0x08
    153a:	0d c0       	rjmp	.+26     	; 0x1556 <__vector_5+0x54>
	inline void dcrCount(){pprcount--;};
    153c:	ed ef       	ldi	r30, 0xFD	; 253
    153e:	f2 e0       	ldi	r31, 0x02	; 2
    1540:	85 81       	ldd	r24, Z+5	; 0x05
    1542:	96 81       	ldd	r25, Z+6	; 0x06
    1544:	a7 81       	ldd	r26, Z+7	; 0x07
    1546:	b0 85       	ldd	r27, Z+8	; 0x08
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	a1 09       	sbc	r26, r1
    154c:	b1 09       	sbc	r27, r1
    154e:	85 83       	std	Z+5, r24	; 0x05
    1550:	96 83       	std	Z+6, r25	; 0x06
    1552:	a7 83       	std	Z+7, r26	; 0x07
    1554:	b0 87       	std	Z+8, r27	; 0x08
		RackEncoder.incCount();
	}
	else
	RackEncoder.dcrCount();
	
}
    1556:	ff 91       	pop	r31
    1558:	ef 91       	pop	r30
    155a:	bf 91       	pop	r27
    155c:	af 91       	pop	r26
    155e:	9f 91       	pop	r25
    1560:	8f 91       	pop	r24
    1562:	0f 90       	pop	r0
    1564:	0b be       	out	0x3b, r0	; 59
    1566:	0f 90       	pop	r0
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	0f 90       	pop	r0
    156c:	1f 90       	pop	r1
    156e:	18 95       	reti

00001570 <__vector_6>:

ISR(INT_VECT6)
{
    1570:	1f 92       	push	r1
    1572:	0f 92       	push	r0
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	0f 92       	push	r0
    1578:	11 24       	eor	r1, r1
    157a:	0b b6       	in	r0, 0x3b	; 59
    157c:	0f 92       	push	r0
    157e:	8f 93       	push	r24
    1580:	9f 93       	push	r25
    1582:	af 93       	push	r26
    1584:	bf 93       	push	r27
    1586:	ef 93       	push	r30
    1588:	ff 93       	push	r31
	if(bit_is_clear(ENCODER6_CHAPORTPIN,ENCODER6_CHBPIN))		//ENCODER_CHAPORTPIN,ENCODER_CHBPIN
    158a:	37 99       	sbic	0x06, 7	; 6
    158c:	0e c0       	rjmp	.+28     	; 0x15aa <__vector_6+0x3a>
	{
		GenevaEncoder.angle++;
    158e:	e0 ef       	ldi	r30, 0xF0	; 240
    1590:	f2 e0       	ldi	r31, 0x02	; 2
    1592:	81 85       	ldd	r24, Z+9	; 0x09
    1594:	92 85       	ldd	r25, Z+10	; 0x0a
    1596:	a3 85       	ldd	r26, Z+11	; 0x0b
    1598:	b4 85       	ldd	r27, Z+12	; 0x0c
    159a:	01 96       	adiw	r24, 0x01	; 1
    159c:	a1 1d       	adc	r26, r1
    159e:	b1 1d       	adc	r27, r1
    15a0:	81 87       	std	Z+9, r24	; 0x09
    15a2:	92 87       	std	Z+10, r25	; 0x0a
    15a4:	a3 87       	std	Z+11, r26	; 0x0b
    15a6:	b4 87       	std	Z+12, r27	; 0x0c
    15a8:	0d c0       	rjmp	.+26     	; 0x15c4 <__vector_6+0x54>
		
	}
	else
	{
		GenevaEncoder.angle--;
    15aa:	e0 ef       	ldi	r30, 0xF0	; 240
    15ac:	f2 e0       	ldi	r31, 0x02	; 2
    15ae:	81 85       	ldd	r24, Z+9	; 0x09
    15b0:	92 85       	ldd	r25, Z+10	; 0x0a
    15b2:	a3 85       	ldd	r26, Z+11	; 0x0b
    15b4:	b4 85       	ldd	r27, Z+12	; 0x0c
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	a1 09       	sbc	r26, r1
    15ba:	b1 09       	sbc	r27, r1
    15bc:	81 87       	std	Z+9, r24	; 0x09
    15be:	92 87       	std	Z+10, r25	; 0x0a
    15c0:	a3 87       	std	Z+11, r26	; 0x0b
    15c2:	b4 87       	std	Z+12, r27	; 0x0c
	}
	
	
	
}
    15c4:	ff 91       	pop	r31
    15c6:	ef 91       	pop	r30
    15c8:	bf 91       	pop	r27
    15ca:	af 91       	pop	r26
    15cc:	9f 91       	pop	r25
    15ce:	8f 91       	pop	r24
    15d0:	0f 90       	pop	r0
    15d2:	0b be       	out	0x3b, r0	; 59
    15d4:	0f 90       	pop	r0
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	0f 90       	pop	r0
    15da:	1f 90       	pop	r1
    15dc:	18 95       	reti

000015de <_GLOBAL__sub_I_RackMotor>:
	
	public:
	
	long int angle;
	
	Rack_Encoder():speed(0),pprcount(0){};
    15de:	ed ef       	ldi	r30, 0xFD	; 253
    15e0:	f2 e0       	ldi	r31, 0x02	; 2
    15e2:	11 82       	std	Z+1, r1	; 0x01
    15e4:	12 82       	std	Z+2, r1	; 0x02
    15e6:	13 82       	std	Z+3, r1	; 0x03
    15e8:	14 82       	std	Z+4, r1	; 0x04
    15ea:	15 82       	std	Z+5, r1	; 0x05
    15ec:	16 82       	std	Z+6, r1	; 0x06
    15ee:	17 82       	std	Z+7, r1	; 0x07
    15f0:	10 86       	std	Z+8, r1	; 0x08
    15f2:	e0 ef       	ldi	r30, 0xF0	; 240
    15f4:	f2 e0       	ldi	r31, 0x02	; 2
    15f6:	11 82       	std	Z+1, r1	; 0x01
    15f8:	12 82       	std	Z+2, r1	; 0x02
    15fa:	13 82       	std	Z+3, r1	; 0x03
    15fc:	14 82       	std	Z+4, r1	; 0x04
    15fe:	15 82       	std	Z+5, r1	; 0x05
    1600:	16 82       	std	Z+6, r1	; 0x06
    1602:	17 82       	std	Z+7, r1	; 0x07
    1604:	10 86       	std	Z+8, r1	; 0x08
		int sp; 
		int error , lastinput , errorsum;
		float cv;
		
	public:
		PID():kp(0),ki(0),kd(0),sp(0),error(0),lastinput(0),errorsum(0){};
    1606:	ec ec       	ldi	r30, 0xCC	; 204
    1608:	f2 e0       	ldi	r31, 0x02	; 2
    160a:	10 82       	st	Z, r1
    160c:	11 82       	std	Z+1, r1	; 0x01
    160e:	12 82       	std	Z+2, r1	; 0x02
    1610:	13 82       	std	Z+3, r1	; 0x03
    1612:	14 82       	std	Z+4, r1	; 0x04
    1614:	15 82       	std	Z+5, r1	; 0x05
    1616:	16 82       	std	Z+6, r1	; 0x06
    1618:	17 82       	std	Z+7, r1	; 0x07
    161a:	10 86       	std	Z+8, r1	; 0x08
    161c:	11 86       	std	Z+9, r1	; 0x09
    161e:	12 86       	std	Z+10, r1	; 0x0a
    1620:	13 86       	std	Z+11, r1	; 0x0b
    1622:	15 86       	std	Z+13, r1	; 0x0d
    1624:	14 86       	std	Z+12, r1	; 0x0c
    1626:	17 86       	std	Z+15, r1	; 0x0f
    1628:	16 86       	std	Z+14, r1	; 0x0e
    162a:	11 8a       	std	Z+17, r1	; 0x11
    162c:	10 8a       	std	Z+16, r1	; 0x10
    162e:	13 8a       	std	Z+19, r1	; 0x13
    1630:	12 8a       	std	Z+18, r1	; 0x12
    1632:	08 95       	ret

00001634 <_ZN12Rack_Encoder15Init_InterruptsEv>:
	Init_Interrupts();
}

void Rack_Encoder::Init_Interrupts()
{
	sei();
    1634:	78 94       	sei
	if (no==1)
    1636:	fc 01       	movw	r30, r24
    1638:	80 81       	ld	r24, Z
    163a:	81 30       	cpi	r24, 0x01	; 1
    163c:	49 f4       	brne	.+18     	; 0x1650 <_ZN12Rack_Encoder15Init_InterruptsEv+0x1c>
	{
		EIMSK &= ~(1<<ENCODER5_INT);
    163e:	ec 98       	cbi	0x1d, 4	; 29
		EICRB |= (1<<INT5_ISC1);	//falling edge
    1640:	ea e6       	ldi	r30, 0x6A	; 106
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	82 60       	ori	r24, 0x02	; 2
    1648:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODER5_INT);		//setting INT pin
    164a:	ec 9a       	sbi	0x1d, 4	; 29
		EIFR |= (1<<INT5_INTF);	    //clear int flag
    164c:	e4 9a       	sbi	0x1c, 4	; 28
    164e:	08 95       	ret
	}
	else if (no==2)
    1650:	82 30       	cpi	r24, 0x02	; 2
    1652:	41 f4       	brne	.+16     	; 0x1664 <_ZN12Rack_Encoder15Init_InterruptsEv+0x30>
	{
		EIMSK &= ~(1<<ENCODER6_INT);
    1654:	ed 98       	cbi	0x1d, 5	; 29
		EICRB |= (1<<INT6_ISC1);	//falling edge
    1656:	ea e6       	ldi	r30, 0x6A	; 106
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	88 60       	ori	r24, 0x08	; 8
    165e:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODER6_INT);		//setting INT pin
    1660:	ed 9a       	sbi	0x1d, 5	; 29
		EIFR |= (1<<INT6_INTF);	    //clear int flag
    1662:	e5 9a       	sbi	0x1c, 5	; 28
    1664:	08 95       	ret

00001666 <_ZN12Rack_Encoder10InitialiseEh>:

#include "Rack_Encoder.h"

void Rack_Encoder::Initialise(uint8_t x)
{
	no = x;
    1666:	fc 01       	movw	r30, r24
    1668:	60 83       	st	Z, r22
	if(no==1)
    166a:	61 30       	cpi	r22, 0x01	; 1
    166c:	29 f4       	brne	.+10     	; 0x1678 <_ZN12Rack_Encoder10InitialiseEh+0x12>
	{
		INPUT(ENCODER5_CHANNELA);
    166e:	6c 98       	cbi	0x0d, 4	; 13
		INPUT(ENCODER5_CHANNELB);
    1670:	3d 98       	cbi	0x07, 5	; 7
		SET(ENCODER5_CHANNELA);
    1672:	74 9a       	sbi	0x0e, 4	; 14
		SET(ENCODER5_CHANNELB);
    1674:	45 9a       	sbi	0x08, 5	; 8
    1676:	06 c0       	rjmp	.+12     	; 0x1684 <_ZN12Rack_Encoder10InitialiseEh+0x1e>
	}
	else if (no==2)
    1678:	62 30       	cpi	r22, 0x02	; 2
    167a:	21 f4       	brne	.+8      	; 0x1684 <_ZN12Rack_Encoder10InitialiseEh+0x1e>
	{
		INPUT(ENCODER6_CHANNELA);
    167c:	6d 98       	cbi	0x0d, 5	; 13
		INPUT(ENCODER6_CHANNELB);
    167e:	3f 98       	cbi	0x07, 7	; 7
		SET(ENCODER6_CHANNELA);
    1680:	75 9a       	sbi	0x0e, 5	; 14
		SET(ENCODER6_CHANNELB);
    1682:	47 9a       	sbi	0x08, 7	; 8
	}
	Init_Interrupts();
    1684:	d7 cf       	rjmp	.-82     	; 0x1634 <_ZN12Rack_Encoder15Init_InterruptsEv>
    1686:	08 95       	ret

00001688 <_ZN10Rack_Motor7InitPWMEv>:

}

void Rack_Motor::InitPWM()
{
	if (num==1)
    1688:	fc 01       	movw	r30, r24
    168a:	80 81       	ld	r24, Z
    168c:	81 30       	cpi	r24, 0x01	; 1
    168e:	c1 f4       	brne	.+48     	; 0x16c0 <_ZN10Rack_Motor7InitPWMEv+0x38>
	{
		OUTPUT(DD_F5);
    1690:	24 9a       	sbi	0x04, 4	; 4
		OUTPUT(DD_B5);
    1692:	e1 e0       	ldi	r30, 0x01	; 1
    1694:	f1 e0       	ldi	r31, 0x01	; 1
    1696:	80 81       	ld	r24, Z
    1698:	80 64       	ori	r24, 0x40	; 64
    169a:	80 83       	st	Z, r24

		OUTPUT(DD_PWM5);
    169c:	25 9a       	sbi	0x04, 5	; 4

		PWM_TCCRA5	|=  ( 1 << PWM_5COM1 ) | ( 1 << PWM_5WGM1 );														//
    169e:	e0 e8       	ldi	r30, 0x80	; 128
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	82 68       	ori	r24, 0x82	; 130
    16a6:	80 83       	st	Z, r24
		PWM_TCCRB5	|=  ( 1 << PWM_5WGM2 ) | ( 1 << PWM_5WGM3 ) | ( 1 << PWM_5CS1);									//PRESCALAR 8
    16a8:	e1 e8       	ldi	r30, 0x81	; 129
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	8a 61       	ori	r24, 0x1A	; 26
    16b0:	80 83       	st	Z, r24
		PWM_ICR5		 =        RACK_ICR_TOP;
    16b2:	89 ef       	ldi	r24, 0xF9	; 249
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
    16ba:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
    16be:	08 95       	ret
	}
	else if(num==2)
    16c0:	82 30       	cpi	r24, 0x02	; 2
    16c2:	b9 f4       	brne	.+46     	; 0x16f2 <_ZN10Rack_Motor7InitPWMEv+0x6a>
	{
		OUTPUT(DD_F6);
    16c4:	27 9a       	sbi	0x04, 7	; 4
		OUTPUT(DD_B6);
    16c6:	e1 e0       	ldi	r30, 0x01	; 1
    16c8:	f1 e0       	ldi	r31, 0x01	; 1
    16ca:	80 81       	ld	r24, Z
    16cc:	80 62       	ori	r24, 0x20	; 32
    16ce:	80 83       	st	Z, r24

		OUTPUT(DD_PWM6);
    16d0:	26 9a       	sbi	0x04, 6	; 4

		PWM_TCCRA6	|=  ( 1 << PWM_6COM1 ) | ( 1 << PWM_6WGM1 );														//
    16d2:	e0 e8       	ldi	r30, 0x80	; 128
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	82 62       	ori	r24, 0x22	; 34
    16da:	80 83       	st	Z, r24
		PWM_TCCRB6	|=  ( 1 << PWM_6WGM2 ) | ( 1 << PWM_6WGM3 ) | ( 1 << PWM_6CS1);									//PRESCALAR 8
    16dc:	e1 e8       	ldi	r30, 0x81	; 129
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	8a 61       	ori	r24, 0x1A	; 26
    16e4:	80 83       	st	Z, r24
		PWM_ICR6		 =         RACK_ICR_TOP;
    16e6:	89 ef       	ldi	r24, 0xF9	; 249
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
    16ee:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
    16f2:	08 95       	ret

000016f4 <_ZN10Rack_Motor19SetForwardDirectionEv>:
	
}

void Rack_Motor::SetForwardDirection()
{
	switch(num)
    16f4:	fc 01       	movw	r30, r24
    16f6:	80 81       	ld	r24, Z
    16f8:	81 30       	cpi	r24, 0x01	; 1
    16fa:	19 f0       	breq	.+6      	; 0x1702 <_ZN10Rack_Motor19SetForwardDirectionEv+0xe>
    16fc:	82 30       	cpi	r24, 0x02	; 2
    16fe:	41 f0       	breq	.+16     	; 0x1710 <_ZN10Rack_Motor19SetForwardDirectionEv+0x1c>
    1700:	08 95       	ret
	{
		case 1:
		SET		(DD_F5);
    1702:	2c 9a       	sbi	0x05, 4	; 5
		CLEAR	(DD_B5);
    1704:	e2 e0       	ldi	r30, 0x02	; 2
    1706:	f1 e0       	ldi	r31, 0x01	; 1
    1708:	80 81       	ld	r24, Z
    170a:	8f 7b       	andi	r24, 0xBF	; 191
    170c:	80 83       	st	Z, r24
		break;
    170e:	08 95       	ret
		case 2:
		SET		(DD_F6);
    1710:	2f 9a       	sbi	0x05, 7	; 5
		CLEAR	(DD_B6);
    1712:	e2 e0       	ldi	r30, 0x02	; 2
    1714:	f1 e0       	ldi	r31, 0x01	; 1
    1716:	80 81       	ld	r24, Z
    1718:	8f 7d       	andi	r24, 0xDF	; 223
    171a:	80 83       	st	Z, r24
    171c:	08 95       	ret

0000171e <_ZN10Rack_Motor19SetReverseDirectionEv>:
	

}
void Rack_Motor::SetReverseDirection()
{
	switch(num)
    171e:	fc 01       	movw	r30, r24
    1720:	80 81       	ld	r24, Z
    1722:	81 30       	cpi	r24, 0x01	; 1
    1724:	19 f0       	breq	.+6      	; 0x172c <_ZN10Rack_Motor19SetReverseDirectionEv+0xe>
    1726:	82 30       	cpi	r24, 0x02	; 2
    1728:	41 f0       	breq	.+16     	; 0x173a <_ZN10Rack_Motor19SetReverseDirectionEv+0x1c>
    172a:	08 95       	ret
	{
		case 1:
		CLEAR	(DD_F5);
    172c:	2c 98       	cbi	0x05, 4	; 5
		SET		(DD_B5);
    172e:	e2 e0       	ldi	r30, 0x02	; 2
    1730:	f1 e0       	ldi	r31, 0x01	; 1
    1732:	80 81       	ld	r24, Z
    1734:	80 64       	ori	r24, 0x40	; 64
    1736:	80 83       	st	Z, r24
		break;
    1738:	08 95       	ret
		case 2:
		CLEAR	(DD_F6);
    173a:	2f 98       	cbi	0x05, 7	; 5
		SET		(DD_B6);
    173c:	e2 e0       	ldi	r30, 0x02	; 2
    173e:	f1 e0       	ldi	r31, 0x01	; 1
    1740:	80 81       	ld	r24, Z
    1742:	80 62       	ori	r24, 0x20	; 32
    1744:	80 83       	st	Z, r24
    1746:	08 95       	ret

00001748 <_ZN10Rack_Motor9StopMotorEv>:

}

void Rack_Motor::StopMotor()
{
	switch(num)
    1748:	fc 01       	movw	r30, r24
    174a:	80 81       	ld	r24, Z
    174c:	81 30       	cpi	r24, 0x01	; 1
    174e:	19 f0       	breq	.+6      	; 0x1756 <_ZN10Rack_Motor9StopMotorEv+0xe>
    1750:	82 30       	cpi	r24, 0x02	; 2
    1752:	61 f0       	breq	.+24     	; 0x176c <_ZN10Rack_Motor9StopMotorEv+0x24>
    1754:	08 95       	ret
	{
		case 1:
		CLEAR	(DD_F5);
    1756:	2c 98       	cbi	0x05, 4	; 5
		CLEAR	(DD_B5);
    1758:	e2 e0       	ldi	r30, 0x02	; 2
    175a:	f1 e0       	ldi	r31, 0x01	; 1
    175c:	80 81       	ld	r24, Z
    175e:	8f 7b       	andi	r24, 0xBF	; 191
    1760:	80 83       	st	Z, r24

		PWM_OCR5 = 0;
    1762:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    1766:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
		break;
    176a:	08 95       	ret
		case 2:
		CLEAR	(DD_F6);
    176c:	2f 98       	cbi	0x05, 7	; 5
		CLEAR	(DD_B6);
    176e:	e2 e0       	ldi	r30, 0x02	; 2
    1770:	f1 e0       	ldi	r31, 0x01	; 1
    1772:	80 81       	ld	r24, Z
    1774:	8f 7d       	andi	r24, 0xDF	; 223
    1776:	80 83       	st	Z, r24

		PWM_OCR6 = 0;
    1778:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    177c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
    1780:	08 95       	ret

00001782 <_ZN10Rack_Motor11SetOcrValueEi>:
	}
}


void Rack_Motor::SetOcrValue(int Ocr)
{
    1782:	0f 93       	push	r16
    1784:	1f 93       	push	r17
    1786:	cf 93       	push	r28
    1788:	df 93       	push	r29
    178a:	8c 01       	movw	r16, r24
    178c:	eb 01       	movw	r28, r22
  if (Ocr > 0)
    178e:	1c 16       	cp	r1, r28
    1790:	1d 06       	cpc	r1, r29
    1792:	0c f4       	brge	.+2      	; 0x1796 <_ZN10Rack_Motor11SetOcrValueEi+0x14>
	SetForwardDirection();
    1794:	af df       	rcall	.-162    	; 0x16f4 <_ZN10Rack_Motor19SetForwardDirectionEv>
  if( Ocr < 0)
    1796:	dd 23       	and	r29, r29
    1798:	2c f4       	brge	.+10     	; 0x17a4 <_ZN10Rack_Motor11SetOcrValueEi+0x22>
  {
	  Ocr = -Ocr;
    179a:	d1 95       	neg	r29
    179c:	c1 95       	neg	r28
    179e:	d1 09       	sbc	r29, r1
	  SetReverseDirection();
    17a0:	c8 01       	movw	r24, r16
    17a2:	bd df       	rcall	.-134    	; 0x171e <_ZN10Rack_Motor19SetReverseDirectionEv>
    17a4:	ca 3f       	cpi	r28, 0xFA	; 250
    17a6:	d1 05       	cpc	r29, r1
    17a8:	14 f0       	brlt	.+4      	; 0x17ae <_ZN10Rack_Motor11SetOcrValueEi+0x2c>
    17aa:	c9 ef       	ldi	r28, 0xF9	; 249
    17ac:	d0 e0       	ldi	r29, 0x00	; 0
  }
  if( Ocr > RACK_MAX_VALUE)
	Ocr = RACK_MAX_VALUE;
	switch(num)
    17ae:	f8 01       	movw	r30, r16
    17b0:	80 81       	ld	r24, Z
    17b2:	81 30       	cpi	r24, 0x01	; 1
    17b4:	19 f0       	breq	.+6      	; 0x17bc <_ZN10Rack_Motor11SetOcrValueEi+0x3a>
    17b6:	82 30       	cpi	r24, 0x02	; 2
    17b8:	31 f0       	breq	.+12     	; 0x17c6 <_ZN10Rack_Motor11SetOcrValueEi+0x44>
    17ba:	09 c0       	rjmp	.+18     	; 0x17ce <_ZN10Rack_Motor11SetOcrValueEi+0x4c>
	{
		case 1:
		PWM_OCR5	= Ocr;
    17bc:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    17c0:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
		break;
    17c4:	04 c0       	rjmp	.+8      	; 0x17ce <_ZN10Rack_Motor11SetOcrValueEi+0x4c>
		case 2:
		PWM_OCR6	= Ocr;
    17c6:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    17ca:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
		break;
	}
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	1f 91       	pop	r17
    17d4:	0f 91       	pop	r16
    17d6:	08 95       	ret

000017d8 <_ZN10Rack_Motor10InitialiseEh>:


#include "Rack_Motor.h"

void Rack_Motor::Initialise(uint8_t no)
{
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
    17dc:	ec 01       	movw	r28, r24
	num = no;
    17de:	68 83       	st	Y, r22
	InitPWM();
    17e0:	53 df       	rcall	.-346    	; 0x1688 <_ZN10Rack_Motor7InitPWMEv>

	StopMotor();
    17e2:	ce 01       	movw	r24, r28
    17e4:	b1 df       	rcall	.-158    	; 0x1748 <_ZN10Rack_Motor9StopMotorEv>
	SetOcrValue(0);
    17e6:	60 e0       	ldi	r22, 0x00	; 0
    17e8:	70 e0       	ldi	r23, 0x00	; 0
    17ea:	ce 01       	movw	r24, r28
    17ec:	ca df       	rcall	.-108    	; 0x1782 <_ZN10Rack_Motor11SetOcrValueEi>

}
    17ee:	df 91       	pop	r29
    17f0:	cf 91       	pop	r28
    17f2:	08 95       	ret

000017f4 <_Z9initUART0v>:

void UART3TransmitString(const char *s)
{
	while(*s)
	UART3Transmit(*s++);
}
    17f4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    17f8:	87 e6       	ldi	r24, 0x67	; 103
    17fa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    17fe:	88 e9       	ldi	r24, 0x98	; 152
    1800:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1804:	86 e0       	ldi	r24, 0x06	; 6
    1806:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    180a:	08 95       	ret

0000180c <_Z9initUART2v>:
    180c:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <_ZL9datacount>
    1810:	ee e0       	ldi	r30, 0x0E	; 14
    1812:	f3 e0       	ldi	r31, 0x03	; 3
    1814:	10 82       	st	Z, r1
    1816:	11 82       	std	Z+1, r1	; 0x01
    1818:	12 82       	std	Z+2, r1	; 0x02
    181a:	13 82       	std	Z+3, r1	; 0x03
    181c:	82 e3       	ldi	r24, 0x32	; 50
    181e:	84 83       	std	Z+4, r24	; 0x04
    1820:	85 83       	std	Z+5, r24	; 0x05
    1822:	86 83       	std	Z+6, r24	; 0x06
    1824:	87 83       	std	Z+7, r24	; 0x07
    1826:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    182a:	89 e1       	ldi	r24, 0x19	; 25
    182c:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    1830:	88 e9       	ldi	r24, 0x98	; 152
    1832:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1836:	86 e0       	ldi	r24, 0x06	; 6
    1838:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    183c:	08 95       	ret

0000183e <__vector_25>:

ISR(USART0_RX_vect)
{
    183e:	1f 92       	push	r1
    1840:	0f 92       	push	r0
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	0f 92       	push	r0
    1846:	11 24       	eor	r1, r1
    1848:	8f 93       	push	r24
	buffer=UDR0;
    184a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    184e:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <buffer>
}
    1852:	8f 91       	pop	r24
    1854:	0f 90       	pop	r0
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	0f 90       	pop	r0
    185a:	1f 90       	pop	r1
    185c:	18 95       	reti

0000185e <__vector_36>:

ISR(USART1_RX_vect)
{
    185e:	1f 92       	push	r1
    1860:	0f 92       	push	r0
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	0f 92       	push	r0
    1866:	11 24       	eor	r1, r1
    1868:	8f 93       	push	r24
	buffer1=UDR1;
    186a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    186e:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <buffer1>
	
}
    1872:	8f 91       	pop	r24
    1874:	0f 90       	pop	r0
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	0f 90       	pop	r0
    187a:	1f 90       	pop	r1
    187c:	18 95       	reti

0000187e <__vector_51>:

ISR(USART2_RX_vect)
{
    187e:	1f 92       	push	r1
    1880:	0f 92       	push	r0
    1882:	0f b6       	in	r0, 0x3f	; 63
    1884:	0f 92       	push	r0
    1886:	11 24       	eor	r1, r1
    1888:	0b b6       	in	r0, 0x3b	; 59
    188a:	0f 92       	push	r0
    188c:	8f 93       	push	r24
    188e:	9f 93       	push	r25
    1890:	ef 93       	push	r30
    1892:	ff 93       	push	r31
	buffer2=UDR2;
    1894:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1898:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <buffer2>
		if(rcvflag)
    189c:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <rcvflag>
    18a0:	99 23       	and	r25, r25
    18a2:	89 f0       	breq	.+34     	; 0x18c6 <__vector_51+0x48>
		{
			rcvdata[datacount] = buffer2;
    18a4:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <_ZL9datacount>
    18a8:	e9 2f       	mov	r30, r25
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	e2 5f       	subi	r30, 0xF2	; 242
    18ae:	fc 4f       	sbci	r31, 0xFC	; 252
    18b0:	80 83       	st	Z, r24
			datacount++;
    18b2:	9f 5f       	subi	r25, 0xFF	; 255
			if(datacount>7)
    18b4:	98 30       	cpi	r25, 0x08	; 8
    18b6:	18 f4       	brcc	.+6      	; 0x18be <__vector_51+0x40>
{
	buffer2=UDR2;
		if(rcvflag)
		{
			rcvdata[datacount] = buffer2;
			datacount++;
    18b8:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <_ZL9datacount>
    18bc:	04 c0       	rjmp	.+8      	; 0x18c6 <__vector_51+0x48>
			if(datacount>7)
			{
				 datacount=0;
    18be:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <_ZL9datacount>
				rcvflag = false; 
    18c2:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <rcvflag>
			}
		}
		if(buffer2==START_BYTE)
    18c6:	8f 37       	cpi	r24, 0x7F	; 127
    18c8:	19 f4       	brne	.+6      	; 0x18d0 <__vector_51+0x52>
		rcvflag=true;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <rcvflag>
		
}
    18d0:	ff 91       	pop	r31
    18d2:	ef 91       	pop	r30
    18d4:	9f 91       	pop	r25
    18d6:	8f 91       	pop	r24
    18d8:	0f 90       	pop	r0
    18da:	0b be       	out	0x3b, r0	; 59
    18dc:	0f 90       	pop	r0
    18de:	0f be       	out	0x3f, r0	; 63
    18e0:	0f 90       	pop	r0
    18e2:	1f 90       	pop	r1
    18e4:	18 95       	reti

000018e6 <__vector_54>:


ISR(USART3_RX_vect)
{
    18e6:	1f 92       	push	r1
    18e8:	0f 92       	push	r0
    18ea:	0f b6       	in	r0, 0x3f	; 63
    18ec:	0f 92       	push	r0
    18ee:	11 24       	eor	r1, r1
    18f0:	8f 93       	push	r24
	buffer3=UDR3;
    18f2:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    18f6:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <buffer3>
}
    18fa:	8f 91       	pop	r24
    18fc:	0f 90       	pop	r0
    18fe:	0f be       	out	0x3f, r0	; 63
    1900:	0f 90       	pop	r0
    1902:	1f 90       	pop	r1
    1904:	18 95       	reti

00001906 <__subsf3>:
    1906:	50 58       	subi	r21, 0x80	; 128

00001908 <__addsf3>:
    1908:	bb 27       	eor	r27, r27
    190a:	aa 27       	eor	r26, r26
    190c:	0e d0       	rcall	.+28     	; 0x192a <__addsf3x>
    190e:	75 c1       	rjmp	.+746    	; 0x1bfa <__fp_round>
    1910:	66 d1       	rcall	.+716    	; 0x1bde <__fp_pscA>
    1912:	30 f0       	brcs	.+12     	; 0x1920 <__addsf3+0x18>
    1914:	6b d1       	rcall	.+726    	; 0x1bec <__fp_pscB>
    1916:	20 f0       	brcs	.+8      	; 0x1920 <__addsf3+0x18>
    1918:	31 f4       	brne	.+12     	; 0x1926 <__addsf3+0x1e>
    191a:	9f 3f       	cpi	r25, 0xFF	; 255
    191c:	11 f4       	brne	.+4      	; 0x1922 <__addsf3+0x1a>
    191e:	1e f4       	brtc	.+6      	; 0x1926 <__addsf3+0x1e>
    1920:	5b c1       	rjmp	.+694    	; 0x1bd8 <__fp_nan>
    1922:	0e f4       	brtc	.+2      	; 0x1926 <__addsf3+0x1e>
    1924:	e0 95       	com	r30
    1926:	e7 fb       	bst	r30, 7
    1928:	51 c1       	rjmp	.+674    	; 0x1bcc <__fp_inf>

0000192a <__addsf3x>:
    192a:	e9 2f       	mov	r30, r25
    192c:	77 d1       	rcall	.+750    	; 0x1c1c <__fp_split3>
    192e:	80 f3       	brcs	.-32     	; 0x1910 <__addsf3+0x8>
    1930:	ba 17       	cp	r27, r26
    1932:	62 07       	cpc	r22, r18
    1934:	73 07       	cpc	r23, r19
    1936:	84 07       	cpc	r24, r20
    1938:	95 07       	cpc	r25, r21
    193a:	18 f0       	brcs	.+6      	; 0x1942 <__addsf3x+0x18>
    193c:	71 f4       	brne	.+28     	; 0x195a <__addsf3x+0x30>
    193e:	9e f5       	brtc	.+102    	; 0x19a6 <__addsf3x+0x7c>
    1940:	8f c1       	rjmp	.+798    	; 0x1c60 <__fp_zero>
    1942:	0e f4       	brtc	.+2      	; 0x1946 <__addsf3x+0x1c>
    1944:	e0 95       	com	r30
    1946:	0b 2e       	mov	r0, r27
    1948:	ba 2f       	mov	r27, r26
    194a:	a0 2d       	mov	r26, r0
    194c:	0b 01       	movw	r0, r22
    194e:	b9 01       	movw	r22, r18
    1950:	90 01       	movw	r18, r0
    1952:	0c 01       	movw	r0, r24
    1954:	ca 01       	movw	r24, r20
    1956:	a0 01       	movw	r20, r0
    1958:	11 24       	eor	r1, r1
    195a:	ff 27       	eor	r31, r31
    195c:	59 1b       	sub	r21, r25
    195e:	99 f0       	breq	.+38     	; 0x1986 <__addsf3x+0x5c>
    1960:	59 3f       	cpi	r21, 0xF9	; 249
    1962:	50 f4       	brcc	.+20     	; 0x1978 <__addsf3x+0x4e>
    1964:	50 3e       	cpi	r21, 0xE0	; 224
    1966:	68 f1       	brcs	.+90     	; 0x19c2 <__addsf3x+0x98>
    1968:	1a 16       	cp	r1, r26
    196a:	f0 40       	sbci	r31, 0x00	; 0
    196c:	a2 2f       	mov	r26, r18
    196e:	23 2f       	mov	r18, r19
    1970:	34 2f       	mov	r19, r20
    1972:	44 27       	eor	r20, r20
    1974:	58 5f       	subi	r21, 0xF8	; 248
    1976:	f3 cf       	rjmp	.-26     	; 0x195e <__addsf3x+0x34>
    1978:	46 95       	lsr	r20
    197a:	37 95       	ror	r19
    197c:	27 95       	ror	r18
    197e:	a7 95       	ror	r26
    1980:	f0 40       	sbci	r31, 0x00	; 0
    1982:	53 95       	inc	r21
    1984:	c9 f7       	brne	.-14     	; 0x1978 <__addsf3x+0x4e>
    1986:	7e f4       	brtc	.+30     	; 0x19a6 <__addsf3x+0x7c>
    1988:	1f 16       	cp	r1, r31
    198a:	ba 0b       	sbc	r27, r26
    198c:	62 0b       	sbc	r22, r18
    198e:	73 0b       	sbc	r23, r19
    1990:	84 0b       	sbc	r24, r20
    1992:	ba f0       	brmi	.+46     	; 0x19c2 <__addsf3x+0x98>
    1994:	91 50       	subi	r25, 0x01	; 1
    1996:	a1 f0       	breq	.+40     	; 0x19c0 <__addsf3x+0x96>
    1998:	ff 0f       	add	r31, r31
    199a:	bb 1f       	adc	r27, r27
    199c:	66 1f       	adc	r22, r22
    199e:	77 1f       	adc	r23, r23
    19a0:	88 1f       	adc	r24, r24
    19a2:	c2 f7       	brpl	.-16     	; 0x1994 <__addsf3x+0x6a>
    19a4:	0e c0       	rjmp	.+28     	; 0x19c2 <__addsf3x+0x98>
    19a6:	ba 0f       	add	r27, r26
    19a8:	62 1f       	adc	r22, r18
    19aa:	73 1f       	adc	r23, r19
    19ac:	84 1f       	adc	r24, r20
    19ae:	48 f4       	brcc	.+18     	; 0x19c2 <__addsf3x+0x98>
    19b0:	87 95       	ror	r24
    19b2:	77 95       	ror	r23
    19b4:	67 95       	ror	r22
    19b6:	b7 95       	ror	r27
    19b8:	f7 95       	ror	r31
    19ba:	9e 3f       	cpi	r25, 0xFE	; 254
    19bc:	08 f0       	brcs	.+2      	; 0x19c0 <__addsf3x+0x96>
    19be:	b3 cf       	rjmp	.-154    	; 0x1926 <__addsf3+0x1e>
    19c0:	93 95       	inc	r25
    19c2:	88 0f       	add	r24, r24
    19c4:	08 f0       	brcs	.+2      	; 0x19c8 <__addsf3x+0x9e>
    19c6:	99 27       	eor	r25, r25
    19c8:	ee 0f       	add	r30, r30
    19ca:	97 95       	ror	r25
    19cc:	87 95       	ror	r24
    19ce:	08 95       	ret

000019d0 <__cmpsf2>:
    19d0:	d9 d0       	rcall	.+434    	; 0x1b84 <__fp_cmp>
    19d2:	08 f4       	brcc	.+2      	; 0x19d6 <__cmpsf2+0x6>
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	08 95       	ret

000019d8 <__divsf3>:
    19d8:	0c d0       	rcall	.+24     	; 0x19f2 <__divsf3x>
    19da:	0f c1       	rjmp	.+542    	; 0x1bfa <__fp_round>
    19dc:	07 d1       	rcall	.+526    	; 0x1bec <__fp_pscB>
    19de:	40 f0       	brcs	.+16     	; 0x19f0 <__divsf3+0x18>
    19e0:	fe d0       	rcall	.+508    	; 0x1bde <__fp_pscA>
    19e2:	30 f0       	brcs	.+12     	; 0x19f0 <__divsf3+0x18>
    19e4:	21 f4       	brne	.+8      	; 0x19ee <__divsf3+0x16>
    19e6:	5f 3f       	cpi	r21, 0xFF	; 255
    19e8:	19 f0       	breq	.+6      	; 0x19f0 <__divsf3+0x18>
    19ea:	f0 c0       	rjmp	.+480    	; 0x1bcc <__fp_inf>
    19ec:	51 11       	cpse	r21, r1
    19ee:	39 c1       	rjmp	.+626    	; 0x1c62 <__fp_szero>
    19f0:	f3 c0       	rjmp	.+486    	; 0x1bd8 <__fp_nan>

000019f2 <__divsf3x>:
    19f2:	14 d1       	rcall	.+552    	; 0x1c1c <__fp_split3>
    19f4:	98 f3       	brcs	.-26     	; 0x19dc <__divsf3+0x4>

000019f6 <__divsf3_pse>:
    19f6:	99 23       	and	r25, r25
    19f8:	c9 f3       	breq	.-14     	; 0x19ec <__divsf3+0x14>
    19fa:	55 23       	and	r21, r21
    19fc:	b1 f3       	breq	.-20     	; 0x19ea <__divsf3+0x12>
    19fe:	95 1b       	sub	r25, r21
    1a00:	55 0b       	sbc	r21, r21
    1a02:	bb 27       	eor	r27, r27
    1a04:	aa 27       	eor	r26, r26
    1a06:	62 17       	cp	r22, r18
    1a08:	73 07       	cpc	r23, r19
    1a0a:	84 07       	cpc	r24, r20
    1a0c:	38 f0       	brcs	.+14     	; 0x1a1c <__divsf3_pse+0x26>
    1a0e:	9f 5f       	subi	r25, 0xFF	; 255
    1a10:	5f 4f       	sbci	r21, 0xFF	; 255
    1a12:	22 0f       	add	r18, r18
    1a14:	33 1f       	adc	r19, r19
    1a16:	44 1f       	adc	r20, r20
    1a18:	aa 1f       	adc	r26, r26
    1a1a:	a9 f3       	breq	.-22     	; 0x1a06 <__divsf3_pse+0x10>
    1a1c:	33 d0       	rcall	.+102    	; 0x1a84 <__divsf3_pse+0x8e>
    1a1e:	0e 2e       	mov	r0, r30
    1a20:	3a f0       	brmi	.+14     	; 0x1a30 <__divsf3_pse+0x3a>
    1a22:	e0 e8       	ldi	r30, 0x80	; 128
    1a24:	30 d0       	rcall	.+96     	; 0x1a86 <__divsf3_pse+0x90>
    1a26:	91 50       	subi	r25, 0x01	; 1
    1a28:	50 40       	sbci	r21, 0x00	; 0
    1a2a:	e6 95       	lsr	r30
    1a2c:	00 1c       	adc	r0, r0
    1a2e:	ca f7       	brpl	.-14     	; 0x1a22 <__divsf3_pse+0x2c>
    1a30:	29 d0       	rcall	.+82     	; 0x1a84 <__divsf3_pse+0x8e>
    1a32:	fe 2f       	mov	r31, r30
    1a34:	27 d0       	rcall	.+78     	; 0x1a84 <__divsf3_pse+0x8e>
    1a36:	66 0f       	add	r22, r22
    1a38:	77 1f       	adc	r23, r23
    1a3a:	88 1f       	adc	r24, r24
    1a3c:	bb 1f       	adc	r27, r27
    1a3e:	26 17       	cp	r18, r22
    1a40:	37 07       	cpc	r19, r23
    1a42:	48 07       	cpc	r20, r24
    1a44:	ab 07       	cpc	r26, r27
    1a46:	b0 e8       	ldi	r27, 0x80	; 128
    1a48:	09 f0       	breq	.+2      	; 0x1a4c <__divsf3_pse+0x56>
    1a4a:	bb 0b       	sbc	r27, r27
    1a4c:	80 2d       	mov	r24, r0
    1a4e:	bf 01       	movw	r22, r30
    1a50:	ff 27       	eor	r31, r31
    1a52:	93 58       	subi	r25, 0x83	; 131
    1a54:	5f 4f       	sbci	r21, 0xFF	; 255
    1a56:	2a f0       	brmi	.+10     	; 0x1a62 <__divsf3_pse+0x6c>
    1a58:	9e 3f       	cpi	r25, 0xFE	; 254
    1a5a:	51 05       	cpc	r21, r1
    1a5c:	68 f0       	brcs	.+26     	; 0x1a78 <__divsf3_pse+0x82>
    1a5e:	b6 c0       	rjmp	.+364    	; 0x1bcc <__fp_inf>
    1a60:	00 c1       	rjmp	.+512    	; 0x1c62 <__fp_szero>
    1a62:	5f 3f       	cpi	r21, 0xFF	; 255
    1a64:	ec f3       	brlt	.-6      	; 0x1a60 <__divsf3_pse+0x6a>
    1a66:	98 3e       	cpi	r25, 0xE8	; 232
    1a68:	dc f3       	brlt	.-10     	; 0x1a60 <__divsf3_pse+0x6a>
    1a6a:	86 95       	lsr	r24
    1a6c:	77 95       	ror	r23
    1a6e:	67 95       	ror	r22
    1a70:	b7 95       	ror	r27
    1a72:	f7 95       	ror	r31
    1a74:	9f 5f       	subi	r25, 0xFF	; 255
    1a76:	c9 f7       	brne	.-14     	; 0x1a6a <__divsf3_pse+0x74>
    1a78:	88 0f       	add	r24, r24
    1a7a:	91 1d       	adc	r25, r1
    1a7c:	96 95       	lsr	r25
    1a7e:	87 95       	ror	r24
    1a80:	97 f9       	bld	r25, 7
    1a82:	08 95       	ret
    1a84:	e1 e0       	ldi	r30, 0x01	; 1
    1a86:	66 0f       	add	r22, r22
    1a88:	77 1f       	adc	r23, r23
    1a8a:	88 1f       	adc	r24, r24
    1a8c:	bb 1f       	adc	r27, r27
    1a8e:	62 17       	cp	r22, r18
    1a90:	73 07       	cpc	r23, r19
    1a92:	84 07       	cpc	r24, r20
    1a94:	ba 07       	cpc	r27, r26
    1a96:	20 f0       	brcs	.+8      	; 0x1aa0 <__divsf3_pse+0xaa>
    1a98:	62 1b       	sub	r22, r18
    1a9a:	73 0b       	sbc	r23, r19
    1a9c:	84 0b       	sbc	r24, r20
    1a9e:	ba 0b       	sbc	r27, r26
    1aa0:	ee 1f       	adc	r30, r30
    1aa2:	88 f7       	brcc	.-30     	; 0x1a86 <__divsf3_pse+0x90>
    1aa4:	e0 95       	com	r30
    1aa6:	08 95       	ret

00001aa8 <__fixsfsi>:
    1aa8:	04 d0       	rcall	.+8      	; 0x1ab2 <__fixunssfsi>
    1aaa:	68 94       	set
    1aac:	b1 11       	cpse	r27, r1
    1aae:	d9 c0       	rjmp	.+434    	; 0x1c62 <__fp_szero>
    1ab0:	08 95       	ret

00001ab2 <__fixunssfsi>:
    1ab2:	bc d0       	rcall	.+376    	; 0x1c2c <__fp_splitA>
    1ab4:	88 f0       	brcs	.+34     	; 0x1ad8 <__fixunssfsi+0x26>
    1ab6:	9f 57       	subi	r25, 0x7F	; 127
    1ab8:	90 f0       	brcs	.+36     	; 0x1ade <__fixunssfsi+0x2c>
    1aba:	b9 2f       	mov	r27, r25
    1abc:	99 27       	eor	r25, r25
    1abe:	b7 51       	subi	r27, 0x17	; 23
    1ac0:	a0 f0       	brcs	.+40     	; 0x1aea <__fixunssfsi+0x38>
    1ac2:	d1 f0       	breq	.+52     	; 0x1af8 <__fixunssfsi+0x46>
    1ac4:	66 0f       	add	r22, r22
    1ac6:	77 1f       	adc	r23, r23
    1ac8:	88 1f       	adc	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	1a f0       	brmi	.+6      	; 0x1ad4 <__fixunssfsi+0x22>
    1ace:	ba 95       	dec	r27
    1ad0:	c9 f7       	brne	.-14     	; 0x1ac4 <__fixunssfsi+0x12>
    1ad2:	12 c0       	rjmp	.+36     	; 0x1af8 <__fixunssfsi+0x46>
    1ad4:	b1 30       	cpi	r27, 0x01	; 1
    1ad6:	81 f0       	breq	.+32     	; 0x1af8 <__fixunssfsi+0x46>
    1ad8:	c3 d0       	rcall	.+390    	; 0x1c60 <__fp_zero>
    1ada:	b1 e0       	ldi	r27, 0x01	; 1
    1adc:	08 95       	ret
    1ade:	c0 c0       	rjmp	.+384    	; 0x1c60 <__fp_zero>
    1ae0:	67 2f       	mov	r22, r23
    1ae2:	78 2f       	mov	r23, r24
    1ae4:	88 27       	eor	r24, r24
    1ae6:	b8 5f       	subi	r27, 0xF8	; 248
    1ae8:	39 f0       	breq	.+14     	; 0x1af8 <__fixunssfsi+0x46>
    1aea:	b9 3f       	cpi	r27, 0xF9	; 249
    1aec:	cc f3       	brlt	.-14     	; 0x1ae0 <__fixunssfsi+0x2e>
    1aee:	86 95       	lsr	r24
    1af0:	77 95       	ror	r23
    1af2:	67 95       	ror	r22
    1af4:	b3 95       	inc	r27
    1af6:	d9 f7       	brne	.-10     	; 0x1aee <__fixunssfsi+0x3c>
    1af8:	3e f4       	brtc	.+14     	; 0x1b08 <__fixunssfsi+0x56>
    1afa:	90 95       	com	r25
    1afc:	80 95       	com	r24
    1afe:	70 95       	com	r23
    1b00:	61 95       	neg	r22
    1b02:	7f 4f       	sbci	r23, 0xFF	; 255
    1b04:	8f 4f       	sbci	r24, 0xFF	; 255
    1b06:	9f 4f       	sbci	r25, 0xFF	; 255
    1b08:	08 95       	ret

00001b0a <__floatunsisf>:
    1b0a:	e8 94       	clt
    1b0c:	09 c0       	rjmp	.+18     	; 0x1b20 <__floatsisf+0x12>

00001b0e <__floatsisf>:
    1b0e:	97 fb       	bst	r25, 7
    1b10:	3e f4       	brtc	.+14     	; 0x1b20 <__floatsisf+0x12>
    1b12:	90 95       	com	r25
    1b14:	80 95       	com	r24
    1b16:	70 95       	com	r23
    1b18:	61 95       	neg	r22
    1b1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b20:	99 23       	and	r25, r25
    1b22:	a9 f0       	breq	.+42     	; 0x1b4e <__floatsisf+0x40>
    1b24:	f9 2f       	mov	r31, r25
    1b26:	96 e9       	ldi	r25, 0x96	; 150
    1b28:	bb 27       	eor	r27, r27
    1b2a:	93 95       	inc	r25
    1b2c:	f6 95       	lsr	r31
    1b2e:	87 95       	ror	r24
    1b30:	77 95       	ror	r23
    1b32:	67 95       	ror	r22
    1b34:	b7 95       	ror	r27
    1b36:	f1 11       	cpse	r31, r1
    1b38:	f8 cf       	rjmp	.-16     	; 0x1b2a <__floatsisf+0x1c>
    1b3a:	fa f4       	brpl	.+62     	; 0x1b7a <__floatsisf+0x6c>
    1b3c:	bb 0f       	add	r27, r27
    1b3e:	11 f4       	brne	.+4      	; 0x1b44 <__floatsisf+0x36>
    1b40:	60 ff       	sbrs	r22, 0
    1b42:	1b c0       	rjmp	.+54     	; 0x1b7a <__floatsisf+0x6c>
    1b44:	6f 5f       	subi	r22, 0xFF	; 255
    1b46:	7f 4f       	sbci	r23, 0xFF	; 255
    1b48:	8f 4f       	sbci	r24, 0xFF	; 255
    1b4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b4c:	16 c0       	rjmp	.+44     	; 0x1b7a <__floatsisf+0x6c>
    1b4e:	88 23       	and	r24, r24
    1b50:	11 f0       	breq	.+4      	; 0x1b56 <__floatsisf+0x48>
    1b52:	96 e9       	ldi	r25, 0x96	; 150
    1b54:	11 c0       	rjmp	.+34     	; 0x1b78 <__floatsisf+0x6a>
    1b56:	77 23       	and	r23, r23
    1b58:	21 f0       	breq	.+8      	; 0x1b62 <__floatsisf+0x54>
    1b5a:	9e e8       	ldi	r25, 0x8E	; 142
    1b5c:	87 2f       	mov	r24, r23
    1b5e:	76 2f       	mov	r23, r22
    1b60:	05 c0       	rjmp	.+10     	; 0x1b6c <__floatsisf+0x5e>
    1b62:	66 23       	and	r22, r22
    1b64:	71 f0       	breq	.+28     	; 0x1b82 <__floatsisf+0x74>
    1b66:	96 e8       	ldi	r25, 0x86	; 134
    1b68:	86 2f       	mov	r24, r22
    1b6a:	70 e0       	ldi	r23, 0x00	; 0
    1b6c:	60 e0       	ldi	r22, 0x00	; 0
    1b6e:	2a f0       	brmi	.+10     	; 0x1b7a <__floatsisf+0x6c>
    1b70:	9a 95       	dec	r25
    1b72:	66 0f       	add	r22, r22
    1b74:	77 1f       	adc	r23, r23
    1b76:	88 1f       	adc	r24, r24
    1b78:	da f7       	brpl	.-10     	; 0x1b70 <__floatsisf+0x62>
    1b7a:	88 0f       	add	r24, r24
    1b7c:	96 95       	lsr	r25
    1b7e:	87 95       	ror	r24
    1b80:	97 f9       	bld	r25, 7
    1b82:	08 95       	ret

00001b84 <__fp_cmp>:
    1b84:	99 0f       	add	r25, r25
    1b86:	00 08       	sbc	r0, r0
    1b88:	55 0f       	add	r21, r21
    1b8a:	aa 0b       	sbc	r26, r26
    1b8c:	e0 e8       	ldi	r30, 0x80	; 128
    1b8e:	fe ef       	ldi	r31, 0xFE	; 254
    1b90:	16 16       	cp	r1, r22
    1b92:	17 06       	cpc	r1, r23
    1b94:	e8 07       	cpc	r30, r24
    1b96:	f9 07       	cpc	r31, r25
    1b98:	c0 f0       	brcs	.+48     	; 0x1bca <__fp_cmp+0x46>
    1b9a:	12 16       	cp	r1, r18
    1b9c:	13 06       	cpc	r1, r19
    1b9e:	e4 07       	cpc	r30, r20
    1ba0:	f5 07       	cpc	r31, r21
    1ba2:	98 f0       	brcs	.+38     	; 0x1bca <__fp_cmp+0x46>
    1ba4:	62 1b       	sub	r22, r18
    1ba6:	73 0b       	sbc	r23, r19
    1ba8:	84 0b       	sbc	r24, r20
    1baa:	95 0b       	sbc	r25, r21
    1bac:	39 f4       	brne	.+14     	; 0x1bbc <__fp_cmp+0x38>
    1bae:	0a 26       	eor	r0, r26
    1bb0:	61 f0       	breq	.+24     	; 0x1bca <__fp_cmp+0x46>
    1bb2:	23 2b       	or	r18, r19
    1bb4:	24 2b       	or	r18, r20
    1bb6:	25 2b       	or	r18, r21
    1bb8:	21 f4       	brne	.+8      	; 0x1bc2 <__fp_cmp+0x3e>
    1bba:	08 95       	ret
    1bbc:	0a 26       	eor	r0, r26
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <__fp_cmp+0x3e>
    1bc0:	a1 40       	sbci	r26, 0x01	; 1
    1bc2:	a6 95       	lsr	r26
    1bc4:	8f ef       	ldi	r24, 0xFF	; 255
    1bc6:	81 1d       	adc	r24, r1
    1bc8:	81 1d       	adc	r24, r1
    1bca:	08 95       	ret

00001bcc <__fp_inf>:
    1bcc:	97 f9       	bld	r25, 7
    1bce:	9f 67       	ori	r25, 0x7F	; 127
    1bd0:	80 e8       	ldi	r24, 0x80	; 128
    1bd2:	70 e0       	ldi	r23, 0x00	; 0
    1bd4:	60 e0       	ldi	r22, 0x00	; 0
    1bd6:	08 95       	ret

00001bd8 <__fp_nan>:
    1bd8:	9f ef       	ldi	r25, 0xFF	; 255
    1bda:	80 ec       	ldi	r24, 0xC0	; 192
    1bdc:	08 95       	ret

00001bde <__fp_pscA>:
    1bde:	00 24       	eor	r0, r0
    1be0:	0a 94       	dec	r0
    1be2:	16 16       	cp	r1, r22
    1be4:	17 06       	cpc	r1, r23
    1be6:	18 06       	cpc	r1, r24
    1be8:	09 06       	cpc	r0, r25
    1bea:	08 95       	ret

00001bec <__fp_pscB>:
    1bec:	00 24       	eor	r0, r0
    1bee:	0a 94       	dec	r0
    1bf0:	12 16       	cp	r1, r18
    1bf2:	13 06       	cpc	r1, r19
    1bf4:	14 06       	cpc	r1, r20
    1bf6:	05 06       	cpc	r0, r21
    1bf8:	08 95       	ret

00001bfa <__fp_round>:
    1bfa:	09 2e       	mov	r0, r25
    1bfc:	03 94       	inc	r0
    1bfe:	00 0c       	add	r0, r0
    1c00:	11 f4       	brne	.+4      	; 0x1c06 <__fp_round+0xc>
    1c02:	88 23       	and	r24, r24
    1c04:	52 f0       	brmi	.+20     	; 0x1c1a <__fp_round+0x20>
    1c06:	bb 0f       	add	r27, r27
    1c08:	40 f4       	brcc	.+16     	; 0x1c1a <__fp_round+0x20>
    1c0a:	bf 2b       	or	r27, r31
    1c0c:	11 f4       	brne	.+4      	; 0x1c12 <__fp_round+0x18>
    1c0e:	60 ff       	sbrs	r22, 0
    1c10:	04 c0       	rjmp	.+8      	; 0x1c1a <__fp_round+0x20>
    1c12:	6f 5f       	subi	r22, 0xFF	; 255
    1c14:	7f 4f       	sbci	r23, 0xFF	; 255
    1c16:	8f 4f       	sbci	r24, 0xFF	; 255
    1c18:	9f 4f       	sbci	r25, 0xFF	; 255
    1c1a:	08 95       	ret

00001c1c <__fp_split3>:
    1c1c:	57 fd       	sbrc	r21, 7
    1c1e:	90 58       	subi	r25, 0x80	; 128
    1c20:	44 0f       	add	r20, r20
    1c22:	55 1f       	adc	r21, r21
    1c24:	59 f0       	breq	.+22     	; 0x1c3c <__fp_splitA+0x10>
    1c26:	5f 3f       	cpi	r21, 0xFF	; 255
    1c28:	71 f0       	breq	.+28     	; 0x1c46 <__fp_splitA+0x1a>
    1c2a:	47 95       	ror	r20

00001c2c <__fp_splitA>:
    1c2c:	88 0f       	add	r24, r24
    1c2e:	97 fb       	bst	r25, 7
    1c30:	99 1f       	adc	r25, r25
    1c32:	61 f0       	breq	.+24     	; 0x1c4c <__fp_splitA+0x20>
    1c34:	9f 3f       	cpi	r25, 0xFF	; 255
    1c36:	79 f0       	breq	.+30     	; 0x1c56 <__fp_splitA+0x2a>
    1c38:	87 95       	ror	r24
    1c3a:	08 95       	ret
    1c3c:	12 16       	cp	r1, r18
    1c3e:	13 06       	cpc	r1, r19
    1c40:	14 06       	cpc	r1, r20
    1c42:	55 1f       	adc	r21, r21
    1c44:	f2 cf       	rjmp	.-28     	; 0x1c2a <__fp_split3+0xe>
    1c46:	46 95       	lsr	r20
    1c48:	f1 df       	rcall	.-30     	; 0x1c2c <__fp_splitA>
    1c4a:	08 c0       	rjmp	.+16     	; 0x1c5c <__fp_splitA+0x30>
    1c4c:	16 16       	cp	r1, r22
    1c4e:	17 06       	cpc	r1, r23
    1c50:	18 06       	cpc	r1, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	f1 cf       	rjmp	.-30     	; 0x1c38 <__fp_splitA+0xc>
    1c56:	86 95       	lsr	r24
    1c58:	71 05       	cpc	r23, r1
    1c5a:	61 05       	cpc	r22, r1
    1c5c:	08 94       	sec
    1c5e:	08 95       	ret

00001c60 <__fp_zero>:
    1c60:	e8 94       	clt

00001c62 <__fp_szero>:
    1c62:	bb 27       	eor	r27, r27
    1c64:	66 27       	eor	r22, r22
    1c66:	77 27       	eor	r23, r23
    1c68:	cb 01       	movw	r24, r22
    1c6a:	97 f9       	bld	r25, 7
    1c6c:	08 95       	ret

00001c6e <__mulsf3>:
    1c6e:	0b d0       	rcall	.+22     	; 0x1c86 <__mulsf3x>
    1c70:	c4 cf       	rjmp	.-120    	; 0x1bfa <__fp_round>
    1c72:	b5 df       	rcall	.-150    	; 0x1bde <__fp_pscA>
    1c74:	28 f0       	brcs	.+10     	; 0x1c80 <__mulsf3+0x12>
    1c76:	ba df       	rcall	.-140    	; 0x1bec <__fp_pscB>
    1c78:	18 f0       	brcs	.+6      	; 0x1c80 <__mulsf3+0x12>
    1c7a:	95 23       	and	r25, r21
    1c7c:	09 f0       	breq	.+2      	; 0x1c80 <__mulsf3+0x12>
    1c7e:	a6 cf       	rjmp	.-180    	; 0x1bcc <__fp_inf>
    1c80:	ab cf       	rjmp	.-170    	; 0x1bd8 <__fp_nan>
    1c82:	11 24       	eor	r1, r1
    1c84:	ee cf       	rjmp	.-36     	; 0x1c62 <__fp_szero>

00001c86 <__mulsf3x>:
    1c86:	ca df       	rcall	.-108    	; 0x1c1c <__fp_split3>
    1c88:	a0 f3       	brcs	.-24     	; 0x1c72 <__mulsf3+0x4>

00001c8a <__mulsf3_pse>:
    1c8a:	95 9f       	mul	r25, r21
    1c8c:	d1 f3       	breq	.-12     	; 0x1c82 <__mulsf3+0x14>
    1c8e:	95 0f       	add	r25, r21
    1c90:	50 e0       	ldi	r21, 0x00	; 0
    1c92:	55 1f       	adc	r21, r21
    1c94:	62 9f       	mul	r22, r18
    1c96:	f0 01       	movw	r30, r0
    1c98:	72 9f       	mul	r23, r18
    1c9a:	bb 27       	eor	r27, r27
    1c9c:	f0 0d       	add	r31, r0
    1c9e:	b1 1d       	adc	r27, r1
    1ca0:	63 9f       	mul	r22, r19
    1ca2:	aa 27       	eor	r26, r26
    1ca4:	f0 0d       	add	r31, r0
    1ca6:	b1 1d       	adc	r27, r1
    1ca8:	aa 1f       	adc	r26, r26
    1caa:	64 9f       	mul	r22, r20
    1cac:	66 27       	eor	r22, r22
    1cae:	b0 0d       	add	r27, r0
    1cb0:	a1 1d       	adc	r26, r1
    1cb2:	66 1f       	adc	r22, r22
    1cb4:	82 9f       	mul	r24, r18
    1cb6:	22 27       	eor	r18, r18
    1cb8:	b0 0d       	add	r27, r0
    1cba:	a1 1d       	adc	r26, r1
    1cbc:	62 1f       	adc	r22, r18
    1cbe:	73 9f       	mul	r23, r19
    1cc0:	b0 0d       	add	r27, r0
    1cc2:	a1 1d       	adc	r26, r1
    1cc4:	62 1f       	adc	r22, r18
    1cc6:	83 9f       	mul	r24, r19
    1cc8:	a0 0d       	add	r26, r0
    1cca:	61 1d       	adc	r22, r1
    1ccc:	22 1f       	adc	r18, r18
    1cce:	74 9f       	mul	r23, r20
    1cd0:	33 27       	eor	r19, r19
    1cd2:	a0 0d       	add	r26, r0
    1cd4:	61 1d       	adc	r22, r1
    1cd6:	23 1f       	adc	r18, r19
    1cd8:	84 9f       	mul	r24, r20
    1cda:	60 0d       	add	r22, r0
    1cdc:	21 1d       	adc	r18, r1
    1cde:	82 2f       	mov	r24, r18
    1ce0:	76 2f       	mov	r23, r22
    1ce2:	6a 2f       	mov	r22, r26
    1ce4:	11 24       	eor	r1, r1
    1ce6:	9f 57       	subi	r25, 0x7F	; 127
    1ce8:	50 40       	sbci	r21, 0x00	; 0
    1cea:	8a f0       	brmi	.+34     	; 0x1d0e <__mulsf3_pse+0x84>
    1cec:	e1 f0       	breq	.+56     	; 0x1d26 <__mulsf3_pse+0x9c>
    1cee:	88 23       	and	r24, r24
    1cf0:	4a f0       	brmi	.+18     	; 0x1d04 <__mulsf3_pse+0x7a>
    1cf2:	ee 0f       	add	r30, r30
    1cf4:	ff 1f       	adc	r31, r31
    1cf6:	bb 1f       	adc	r27, r27
    1cf8:	66 1f       	adc	r22, r22
    1cfa:	77 1f       	adc	r23, r23
    1cfc:	88 1f       	adc	r24, r24
    1cfe:	91 50       	subi	r25, 0x01	; 1
    1d00:	50 40       	sbci	r21, 0x00	; 0
    1d02:	a9 f7       	brne	.-22     	; 0x1cee <__mulsf3_pse+0x64>
    1d04:	9e 3f       	cpi	r25, 0xFE	; 254
    1d06:	51 05       	cpc	r21, r1
    1d08:	70 f0       	brcs	.+28     	; 0x1d26 <__mulsf3_pse+0x9c>
    1d0a:	60 cf       	rjmp	.-320    	; 0x1bcc <__fp_inf>
    1d0c:	aa cf       	rjmp	.-172    	; 0x1c62 <__fp_szero>
    1d0e:	5f 3f       	cpi	r21, 0xFF	; 255
    1d10:	ec f3       	brlt	.-6      	; 0x1d0c <__mulsf3_pse+0x82>
    1d12:	98 3e       	cpi	r25, 0xE8	; 232
    1d14:	dc f3       	brlt	.-10     	; 0x1d0c <__mulsf3_pse+0x82>
    1d16:	86 95       	lsr	r24
    1d18:	77 95       	ror	r23
    1d1a:	67 95       	ror	r22
    1d1c:	b7 95       	ror	r27
    1d1e:	f7 95       	ror	r31
    1d20:	e7 95       	ror	r30
    1d22:	9f 5f       	subi	r25, 0xFF	; 255
    1d24:	c1 f7       	brne	.-16     	; 0x1d16 <__mulsf3_pse+0x8c>
    1d26:	fe 2b       	or	r31, r30
    1d28:	88 0f       	add	r24, r24
    1d2a:	91 1d       	adc	r25, r1
    1d2c:	96 95       	lsr	r25
    1d2e:	87 95       	ror	r24
    1d30:	97 f9       	bld	r25, 7
    1d32:	08 95       	ret

00001d34 <__tablejump2__>:
    1d34:	ee 0f       	add	r30, r30
    1d36:	ff 1f       	adc	r31, r31
    1d38:	88 1f       	adc	r24, r24
    1d3a:	8b bf       	out	0x3b, r24	; 59
    1d3c:	07 90       	elpm	r0, Z+
    1d3e:	f6 91       	elpm	r31, Z
    1d40:	e0 2d       	mov	r30, r0
    1d42:	19 94       	eijmp

00001d44 <_exit>:
    1d44:	f8 94       	cli

00001d46 <__stop_program>:
    1d46:	ff cf       	rjmp	.-2      	; 0x1d46 <__stop_program>
